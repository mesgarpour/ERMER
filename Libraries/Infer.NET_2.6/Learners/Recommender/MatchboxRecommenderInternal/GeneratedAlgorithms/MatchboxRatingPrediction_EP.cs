// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using System.Collections.Generic;
using MicrosoftResearch.Infer.Factors;
using MicrosoftResearch.Infer.Collections;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 11:57 PM on Friday, November 14, 2014.
	/// </remarks>
	public partial class MatchboxRatingPrediction_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the UserCount property</summary>
		private int userCount;
		/// <summary>Field backing the ItemCount property</summary>
		private int itemCount;
		/// <summary>Field backing the UserThresholdCount property</summary>
		private int userThresholdCount;
		/// <summary>Field backing the ObservationCount property</summary>
		private int observationCount;
		/// <summary>Field backing the TraitCount property</summary>
		private int traitCount;
		/// <summary>Field backing the UserTraitsPrior property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraitsPrior;
		/// <summary>Field backing the UserBiasPrior property</summary>
		private DistributionStructArray<Gaussian,double> userBiasPrior;
		/// <summary>Field backing the UserThresholdsPrior property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholdsPrior;
		/// <summary>Field backing the ItemTraitsPrior property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraitsPrior;
		/// <summary>Field backing the ItemBiasPrior property</summary>
		private DistributionStructArray<Gaussian,double> itemBiasPrior;
		/// <summary>Field backing the UserIds property</summary>
		private IList<int> userIds;
		/// <summary>Field backing the ItemIds property</summary>
		private IList<int> itemIds;
		/// <summary>Field backing the AffinityNoiseVariance property</summary>
		private double affinityNoiseVariance;
		/// <summary>Field backing the UserThresholdNoiseVariance property</summary>
		private double userThresholdNoiseVariance;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_UserThresholdCount. Set this to zero to force re-execution of Changed_UserThresholdCount</summary>
		public int Changed_UserThresholdCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount. Set this to zero to force re-execution of Changed_ObservationCount</summary>
		public int Changed_ObservationCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserThresholdCount. Set this to zero to force re-execution of Changed_ObservationCount_UserThresholdCount</summary>
		public int Changed_ObservationCount_UserThresholdCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4. Set this to zero to force re-execution of Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4</summary>
		public int Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_UserBiasPrior. Set this to zero to force re-execution of Changed_UserBiasPrior</summary>
		public int Changed_UserBiasPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_UserBiasPrior_UserIds_ObservationCount. Set this to zero to force re-execution of Changed_UserBiasPrior_UserIds_ObservationCount</summary>
		public int Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ItemBiasPrior. Set this to zero to force re-execution of Changed_ItemBiasPrior</summary>
		public int Changed_ItemBiasPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ItemBiasPrior_ItemIds_ObservationCount. Set this to zero to force re-execution of Changed_ItemBiasPrior_ItemIds_ObservationCount</summary>
		public int Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds. Set this to zero to force re-execution of Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds</summary>
		public int Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserIds_UserTraitsPrior. Set this to zero to force re-execution of Changed_ObservationCount_UserIds_UserTraitsPrior</summary>
		public int Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_UserTraitsPrior. Set this to zero to force re-execution of Changed_UserTraitsPrior</summary>
		public int Changed_UserTraitsPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_ItemIds_ItemTraitsPrior. Set this to zero to force re-execution of Changed_ObservationCount_ItemIds_ItemTraitsPrior</summary>
		public int Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ItemTraitsPrior. Set this to zero to force re-execution of Changed_ItemTraitsPrior</summary>
		public int Changed_ItemTraitsPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_TraitCount. Set this to zero to force re-execution of Changed_ObservationCount_TraitCount</summary>
		public int Changed_ObservationCount_TraitCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds. Set this to zero to force re-execution of Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds</summary>
		public int Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16. Set this to zero to force re-execution of Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16</summary>
		public int Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17. Set this to zero to force re-execution of Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17</summary>
		public int Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserIds_UserThresholdsPrior. Set this to zero to force re-execution of Changed_ObservationCount_UserIds_UserThresholdsPrior</summary>
		public int Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_UserThresholdsPrior. Set this to zero to force re-execution of Changed_UserThresholdsPrior</summary>
		public int Changed_UserThresholdsPrior_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds. Set this to zero to force re-execution of Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds</summary>
		public int Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds. Set this to zero to force re-execution of Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds</summary>
		public int Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22. Set this to zero to force re-execution of Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22</summary>
		public int Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone;
		/// <summary>The constant 'vint44'</summary>
		public int vint44;
		public DistributionRefArray<Discrete,int> Ratings_F;
		public Discrete _hoist;
		public DistributionStructArray<Gaussian,double> UserBias_itemUserIds_observation__B;
		/// <summary>Buffer for GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian></summary>
		public DistributionStructArray<Gaussian,double> UserBias_use_F_marginal;
		public DistributionStructArray<Gaussian,double> UserBias_itemUserIds_observation__F;
		public DistributionStructArray<Gaussian,double> ItemBias_itemItemIds_observation__B;
		/// <summary>Buffer for GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian></summary>
		public DistributionStructArray<Gaussian,double> ItemBias_use_F_marginal;
		public DistributionStructArray<Gaussian,double> ItemBias_itemItemIds_observation__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraits_itemUserIds_observation__B;
		/// <summary>Buffer for GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian, double>, double[]>, DistributionStructArray<Gaussian, double>></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraits_use_F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraits_itemUserIds_observation__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraits_itemItemIds_observation__B;
		/// <summary>Buffer for GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian, double>, double[]>, DistributionStructArray<Gaussian, double>></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraits_use_F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraits_itemItemIds_observation__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholds_itemUserIds_observation__B;
		/// <summary>Buffer for GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian, double>, double[]>, DistributionStructArray<Gaussian, double>></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholds_use_F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholds_itemUserIds_observation__F;
		public Discrete _hoist4;
		public Discrete _hoist9;
		public Discrete[][] Ratings_observation__selector_uses_B;
		public DistributionStructArray<Bernoulli,bool>[][] Ratings_observation__selector_cases_depth1_uses_B;
		public DistributionStructArray<Gaussian,double> vdouble138_F;
		public DistributionStructArray<Gaussian,double> vdouble141_F;
		public DistributionStructArray<Gaussian,double> vdouble142_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble__65_F;
		public DistributionStructArray<Gaussian,double> vdouble143_F;
		public DistributionStructArray<Gaussian,double> vdouble144_F;
		public DistributionStructArray<Gaussian,double> vdouble145_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble__71_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble__72_F;
		/// <summary>The constant 'CurrentRating'</summary>
		public int[][] CurrentRating;
		/// <summary>The constant 'NextRating'</summary>
		public int[][] NextRating;
		/// <summary>Buffer for DoubleIsBetweenOp.LogEvidenceRatio</summary>
		public double[][] true_logZ;
		/// <summary>The constant 'vbool7'</summary>
		public bool[][] vbool7;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Ratings_observation__selector_cases_depth1_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Discrete></summary>
		public DistributionRefArray<Discrete,int> Ratings_observation__selector_uses_B_toDef;
		/// <summary>Message to marginal of 'Ratings'</summary>
		public DistributionRefArray<Discrete,int> Ratings_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'UserCount'</summary>
		public int UserCount
		{
			get {
				return this.userCount;
			}
			set {
				if (this.userCount!=value) {
					this.userCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'ItemCount'</summary>
		public int ItemCount
		{
			get {
				return this.itemCount;
			}
			set {
				if (this.itemCount!=value) {
					this.itemCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'UserThresholdCount'</summary>
		public int UserThresholdCount
		{
			get {
				return this.userThresholdCount;
			}
			set {
				if (this.userThresholdCount!=value) {
					this.userThresholdCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_UserThresholdCount_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
					this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'ObservationCount'</summary>
		public int ObservationCount
		{
			get {
				return this.observationCount;
			}
			set {
				if (this.observationCount!=value) {
					this.observationCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ObservationCount_iterationsDone = 0;
					this.Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone = 0;
					this.Changed_ObservationCount_TraitCount_iterationsDone = 0;
					this.Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone = 0;
					this.Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone = 0;
					this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
					this.Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone = 0;
					this.Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone = 0;
					this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
					this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
					this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
					this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'TraitCount'</summary>
		public int TraitCount
		{
			get {
				return this.traitCount;
			}
			set {
				if (this.traitCount!=value) {
					this.traitCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ObservationCount_TraitCount_iterationsDone = 0;
					this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
					this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
					this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
					this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'UserTraitsPrior'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsPrior
		{
			get {
				return this.userTraitsPrior;
			}
			set {
				this.userTraitsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_UserTraitsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
				this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
				this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'UserBiasPrior'</summary>
		public DistributionStructArray<Gaussian,double> UserBiasPrior
		{
			get {
				return this.userBiasPrior;
			}
			set {
				this.userBiasPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_UserBiasPrior_iterationsDone = 0;
				this.Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
				this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
				this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'UserThresholdsPrior'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsPrior
		{
			get {
				return this.userThresholdsPrior;
			}
			set {
				this.userThresholdsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_UserThresholdsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
				this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ItemTraitsPrior'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsPrior
		{
			get {
				return this.itemTraitsPrior;
			}
			set {
				this.itemTraitsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ItemTraitsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
				this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
				this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ItemBiasPrior'</summary>
		public DistributionStructArray<Gaussian,double> ItemBiasPrior
		{
			get {
				return this.itemBiasPrior;
			}
			set {
				this.itemBiasPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ItemBiasPrior_iterationsDone = 0;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
				this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
				this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'UserIds'</summary>
		public IList<int> UserIds
		{
			get {
				return this.userIds;
			}
			set {
				if ((value!=null)&&(value.Count!=this.observationCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Count)+" when length ")+this.observationCount)+" was expected for variable \'UserIds\'");
				}
				this.userIds = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
				this.Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
				this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
				this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ItemIds'</summary>
		public IList<int> ItemIds
		{
			get {
				return this.itemIds;
			}
			set {
				if ((value!=null)&&(value.Count!=this.observationCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Count)+" when length ")+this.observationCount)+" was expected for variable \'ItemIds\'");
				}
				this.itemIds = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone = 0;
				this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
				this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
				this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
				this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'AffinityNoiseVariance'</summary>
		public double AffinityNoiseVariance
		{
			get {
				return this.affinityNoiseVariance;
			}
			set {
				if (this.affinityNoiseVariance!=value) {
					this.affinityNoiseVariance = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
					this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'UserThresholdNoiseVariance'</summary>
		public double UserThresholdNoiseVariance
		{
			get {
				return this.userThresholdNoiseVariance;
			}
			set {
				if (this.userThresholdNoiseVariance!=value) {
					this.userThresholdNoiseVariance = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 0;
					this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
					this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="UserCount") {
				return this.UserCount;
			}
			if (variableName=="ItemCount") {
				return this.ItemCount;
			}
			if (variableName=="UserThresholdCount") {
				return this.UserThresholdCount;
			}
			if (variableName=="ObservationCount") {
				return this.ObservationCount;
			}
			if (variableName=="TraitCount") {
				return this.TraitCount;
			}
			if (variableName=="UserTraitsPrior") {
				return this.UserTraitsPrior;
			}
			if (variableName=="UserBiasPrior") {
				return this.UserBiasPrior;
			}
			if (variableName=="UserThresholdsPrior") {
				return this.UserThresholdsPrior;
			}
			if (variableName=="ItemTraitsPrior") {
				return this.ItemTraitsPrior;
			}
			if (variableName=="ItemBiasPrior") {
				return this.ItemBiasPrior;
			}
			if (variableName=="UserIds") {
				return this.UserIds;
			}
			if (variableName=="ItemIds") {
				return this.ItemIds;
			}
			if (variableName=="AffinityNoiseVariance") {
				return this.AffinityNoiseVariance;
			}
			if (variableName=="UserThresholdNoiseVariance") {
				return this.UserThresholdNoiseVariance;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="UserCount") {
				this.UserCount = (int)value;
				return ;
			}
			if (variableName=="ItemCount") {
				this.ItemCount = (int)value;
				return ;
			}
			if (variableName=="UserThresholdCount") {
				this.UserThresholdCount = (int)value;
				return ;
			}
			if (variableName=="ObservationCount") {
				this.ObservationCount = (int)value;
				return ;
			}
			if (variableName=="TraitCount") {
				this.TraitCount = (int)value;
				return ;
			}
			if (variableName=="UserTraitsPrior") {
				this.UserTraitsPrior = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="UserBiasPrior") {
				this.UserBiasPrior = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="UserThresholdsPrior") {
				this.UserThresholdsPrior = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="ItemTraitsPrior") {
				this.ItemTraitsPrior = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="ItemBiasPrior") {
				this.ItemBiasPrior = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="UserIds") {
				this.UserIds = (IList<int>)value;
				return ;
			}
			if (variableName=="ItemIds") {
				this.ItemIds = (IList<int>)value;
				return ;
			}
			if (variableName=="AffinityNoiseVariance") {
				this.AffinityNoiseVariance = (double)value;
				return ;
			}
			if (variableName=="UserThresholdNoiseVariance") {
				this.UserThresholdNoiseVariance = (double)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Ratings") {
				return this.RatingsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.Changed_UserThresholdsPrior();
			this.Changed_ItemTraitsPrior();
			this.Changed_UserTraitsPrior();
			this.Changed_ItemBiasPrior();
			this.Changed_UserBiasPrior();
			this.Changed_ObservationCount();
			this.Changed_ObservationCount_UserIds_UserThresholdsPrior();
			this.Changed_ObservationCount_TraitCount();
			this.Changed_ObservationCount_ItemIds_ItemTraitsPrior();
			this.Changed_ObservationCount_UserIds_UserTraitsPrior();
			this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds();
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount();
			this.Changed_UserBiasPrior_UserIds_ObservationCount();
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds();
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16();
			this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17();
			this.Changed_UserThresholdCount();
			this.Changed_ObservationCount_UserThresholdCount();
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds();
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds();
			this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22();
			this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			this.Constant_iterationsDone = 1;
			this.Changed_UserThresholdCount_iterationsDone = 0;
			this.Changed_ObservationCount_iterationsDone = 0;
			this.Changed_ObservationCount_UserThresholdCount_iterationsDone = 0;
			this.Changed_UserBiasPrior_iterationsDone = 0;
			this.Changed_ItemBiasPrior_iterationsDone = 0;
			this.Changed_UserTraitsPrior_iterationsDone = 0;
			this.Changed_ItemTraitsPrior_iterationsDone = 0;
			this.Changed_UserThresholdsPrior_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of UserThresholdsPrior</summary>
		private void Changed_UserThresholdsPrior()
		{
			if (this.Changed_UserThresholdsPrior_iterationsDone==1) {
				return ;
			}
			// Message to 'UserThresholds_itemUserIds_observation_' from GetItems factor
			this.UserThresholds_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userThresholdsPrior);
			this.Changed_UserThresholdsPrior_iterationsDone = 1;
			this.Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ItemTraitsPrior</summary>
		private void Changed_ItemTraitsPrior()
		{
			if (this.Changed_ItemTraitsPrior_iterationsDone==1) {
				return ;
			}
			// Message to 'ItemTraits_itemItemIds_observation_' from GetItems factor
			this.ItemTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraitsPrior);
			this.Changed_ItemTraitsPrior_iterationsDone = 1;
			this.Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of UserTraitsPrior</summary>
		private void Changed_UserTraitsPrior()
		{
			if (this.Changed_UserTraitsPrior_iterationsDone==1) {
				return ;
			}
			// Message to 'UserTraits_itemUserIds_observation_' from GetItems factor
			this.UserTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraitsPrior);
			this.Changed_UserTraitsPrior_iterationsDone = 1;
			this.Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ItemBiasPrior</summary>
		private void Changed_ItemBiasPrior()
		{
			if (this.Changed_ItemBiasPrior_iterationsDone==1) {
				return ;
			}
			// Message to 'ItemBias_itemItemIds_observation_' from GetItems factor
			this.ItemBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.itemBiasPrior);
			this.Changed_ItemBiasPrior_iterationsDone = 1;
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of UserBiasPrior</summary>
		private void Changed_UserBiasPrior()
		{
			if (this.Changed_UserBiasPrior_iterationsDone==1) {
				return ;
			}
			// Message to 'UserBias_itemUserIds_observation_' from GetItems factor
			this.UserBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.userBiasPrior);
			this.Changed_UserBiasPrior_iterationsDone = 1;
			this.Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount</summary>
		private void Changed_ObservationCount()
		{
			if (this.Changed_ObservationCount_iterationsDone==1) {
				return ;
			}
			// Create array for 'Ratings' Forwards messages.
			this.Ratings_F = new DistributionRefArray<Discrete,int>(this.observationCount);
			// Create array for replicates of 'Ratings_observation__selector_uses_B'
			this.Ratings_observation__selector_uses_B = new Discrete[this.observationCount][];
			for(int observation = 0; observation<this.observationCount; observation++) {
				// Create array for 'Ratings_observation__selector_uses' Backwards messages.
				this.Ratings_observation__selector_uses_B[observation] = new Discrete[3];
			}
			// Create array for replicates of 'Ratings_observation__selector_cases_depth1_uses_B'
			this.Ratings_observation__selector_cases_depth1_uses_B = new DistributionStructArray<Bernoulli,bool>[this.observationCount][];
			// Create array for 'UserBias_itemUserIds_observation_' Backwards messages.
			this.UserBias_itemUserIds_observation__B = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.UserBias_itemUserIds_observation__B[observation] = Gaussian.Uniform();
			}
			// Create array for 'UserBias_itemUserIds_observation_' Forwards messages.
			this.UserBias_itemUserIds_observation__F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.UserBias_itemUserIds_observation__F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble138_F'
			this.vdouble138_F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.vdouble138_F[observation] = Gaussian.Uniform();
			}
			// Create array for 'ItemBias_itemItemIds_observation_' Backwards messages.
			this.ItemBias_itemItemIds_observation__B = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.ItemBias_itemItemIds_observation__B[observation] = Gaussian.Uniform();
			}
			// Create array for 'ItemBias_itemItemIds_observation_' Forwards messages.
			this.ItemBias_itemItemIds_observation__F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.ItemBias_itemItemIds_observation__F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble141_F'
			this.vdouble141_F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.vdouble141_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble142_F'
			this.vdouble142_F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.vdouble142_F[observation] = Gaussian.Uniform();
			}
			// Create array for 'UserTraits_itemUserIds_observation_' Backwards messages.
			this.UserTraits_itemUserIds_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for 'UserTraits_itemUserIds_observation_' Forwards messages.
			this.UserTraits_itemUserIds_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for 'ItemTraits_itemItemIds_observation_' Backwards messages.
			this.ItemTraits_itemItemIds_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for 'ItemTraits_itemItemIds_observation_' Forwards messages.
			this.ItemTraits_itemItemIds_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for replicates of 'vdouble__65_F'
			this.vdouble__65_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for replicates of 'vdouble143_F'
			this.vdouble143_F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.vdouble143_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble144_F'
			this.vdouble144_F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.vdouble144_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble145_F'
			this.vdouble145_F = new DistributionStructArray<Gaussian,double>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.vdouble145_F[observation] = Gaussian.Uniform();
			}
			// Create array for 'UserThresholds_itemUserIds_observation_' Backwards messages.
			this.UserThresholds_itemUserIds_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for 'UserThresholds_itemUserIds_observation_' Forwards messages.
			this.UserThresholds_itemUserIds_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for replicates of 'vdouble__71_F'
			this.vdouble__71_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for replicates of 'vdouble__72_F'
			this.vdouble__72_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.observationCount);
			// Create array for replicates of 'CurrentRating'
			this.CurrentRating = new int[this.observationCount][];
			// Create array for replicates of 'NextRating'
			this.NextRating = new int[this.observationCount][];
			// Create array for replicates of 'true_logZ'
			this.true_logZ = new double[this.observationCount][];
			// Create array for replicates of 'vbool7'
			this.vbool7 = new bool[this.observationCount][];
			// Create array for replicates of 'Ratings_observation__selector_cases_depth1_B'
			this.Ratings_observation__selector_cases_depth1_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.observationCount);
			// Create array for replicates of 'Ratings_observation__selector_uses_B_toDef'
			this.Ratings_observation__selector_uses_B_toDef = new DistributionRefArray<Discrete,int>(this.observationCount);
			this.Changed_ObservationCount_iterationsDone = 1;
			this.Changed_ObservationCount_UserThresholdCount_iterationsDone = 0;
			this.Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone = 0;
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone = 0;
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
			this.Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone = 0;
			this.Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone = 0;
			this.Changed_ObservationCount_TraitCount_iterationsDone = 0;
			this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
			this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
			this.Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserIds and UserThresholdsPrior</summary>
		private void Changed_ObservationCount_UserIds_UserThresholdsPrior()
		{
			if (this.Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.UserThresholds_itemUserIds_observation__B[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.userThresholdsPrior[this.userIds[observation]]);
			}
			// Message to 'UserThresholds_itemUserIds_observation_' from GetItems factor
			this.UserThresholds_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userThresholdsPrior, this.UserThresholds_itemUserIds_observation__B, this.userIds, this.UserThresholds_use_F_marginal);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.UserThresholds_itemUserIds_observation__F[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.userThresholdsPrior[this.userIds[observation]]);
				// Message to 'UserThresholds_itemUserIds_observation_' from GetItems factor
				this.UserThresholds_itemUserIds_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.UserThresholds_itemUserIds_observation__B[observation], this.userThresholdsPrior, this.UserThresholds_use_F_marginal, this.userIds, observation, this.UserThresholds_itemUserIds_observation__F[observation]);
			}
			this.Changed_ObservationCount_UserIds_UserThresholdsPrior_iterationsDone = 1;
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and TraitCount</summary>
		private void Changed_ObservationCount_TraitCount()
		{
			if (this.Changed_ObservationCount_TraitCount_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				// Create array for 'vdouble__65' Forwards messages.
				this.vdouble__65_F[observation] = new DistributionStructArray<Gaussian,double>(this.traitCount);
				for(int trait = 0; trait<this.traitCount; trait++) {
					this.vdouble__65_F[observation][trait] = Gaussian.Uniform();
				}
			}
			this.Changed_ObservationCount_TraitCount_iterationsDone = 1;
			this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and ItemIds and ItemTraitsPrior</summary>
		private void Changed_ObservationCount_ItemIds_ItemTraitsPrior()
		{
			if (this.Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.ItemTraits_itemItemIds_observation__B[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.itemTraitsPrior[this.itemIds[observation]]);
			}
			// Message to 'ItemTraits_itemItemIds_observation_' from GetItems factor
			this.ItemTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraitsPrior, this.ItemTraits_itemItemIds_observation__B, this.itemIds, this.ItemTraits_use_F_marginal);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.ItemTraits_itemItemIds_observation__F[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.itemTraitsPrior[this.itemIds[observation]]);
				// Message to 'ItemTraits_itemItemIds_observation_' from GetItems factor
				this.ItemTraits_itemItemIds_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.ItemTraits_itemItemIds_observation__B[observation], this.itemTraitsPrior, this.ItemTraits_use_F_marginal, this.itemIds, observation, this.ItemTraits_itemItemIds_observation__F[observation]);
			}
			this.Changed_ObservationCount_ItemIds_ItemTraitsPrior_iterationsDone = 1;
			this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserIds and UserTraitsPrior</summary>
		private void Changed_ObservationCount_UserIds_UserTraitsPrior()
		{
			if (this.Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.UserTraits_itemUserIds_observation__B[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.userTraitsPrior[this.userIds[observation]]);
			}
			// Message to 'UserTraits_itemUserIds_observation_' from GetItems factor
			this.UserTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraitsPrior, this.UserTraits_itemUserIds_observation__B, this.userIds, this.UserTraits_use_F_marginal);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.UserTraits_itemUserIds_observation__F[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.userTraitsPrior[this.userIds[observation]]);
				// Message to 'UserTraits_itemUserIds_observation_' from GetItems factor
				this.UserTraits_itemUserIds_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.UserTraits_itemUserIds_observation__B[observation], this.userTraitsPrior, this.UserTraits_use_F_marginal, this.userIds, observation, this.UserTraits_itemUserIds_observation__F[observation]);
			}
			this.Changed_ObservationCount_UserIds_UserTraitsPrior_iterationsDone = 1;
			this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and TraitCount and UserTraitsPrior and UserIds and ItemTraitsPrior and ItemIds</summary>
		private void Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds()
		{
			if (this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				for(int trait = 0; trait<this.traitCount; trait++) {
					// Message to 'vdouble__65' from Product_SHG09 factor
					this.vdouble__65_F[observation][trait] = GaussianProductOp_SHG09.ProductAverageConditional(this.UserTraits_itemUserIds_observation__F[observation][trait], this.ItemTraits_itemItemIds_observation__F[observation][trait], this.UserTraits_itemUserIds_observation__B[observation][trait], this.ItemTraits_itemItemIds_observation__B[observation][trait]);
				}
				// Message to 'vdouble143' from Sum factor
				this.vdouble143_F[observation] = FastSumOp.SumAverageConditional(this.vdouble__65_F[observation]);
			}
			this.Changed_ObservationCount_TraitCount_UserTraitsPrior_UserIds_ItemTraitsPrior_ItemIds_iterationsDone = 1;
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ItemBiasPrior and ItemIds and ObservationCount</summary>
		private void Changed_ItemBiasPrior_ItemIds_ObservationCount()
		{
			if (this.Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone==1) {
				return ;
			}
			// Message to 'ItemBias_itemItemIds_observation_' from GetItems factor
			this.ItemBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.itemBiasPrior, this.ItemBias_itemItemIds_observation__B, this.itemIds, this.ItemBias_use_F_marginal);
			for(int observation = 0; observation<this.observationCount; observation++) {
				// Message to 'ItemBias_itemItemIds_observation_' from GetItems factor
				this.ItemBias_itemItemIds_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.ItemBias_itemItemIds_observation__B[observation], this.itemBiasPrior, this.ItemBias_use_F_marginal, this.itemIds, observation, this.ItemBias_itemItemIds_observation__F[observation]);
				// Message to 'vdouble141' from Product_SHG09 factor
				this.vdouble141_F[observation] = GaussianProductOp_SHG09.ProductAverageConditional(this.ItemBias_itemItemIds_observation__F[observation], 1.0, this.ItemBias_itemItemIds_observation__B[observation]);
			}
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount_iterationsDone = 1;
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of UserBiasPrior and UserIds and ObservationCount</summary>
		private void Changed_UserBiasPrior_UserIds_ObservationCount()
		{
			if (this.Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone==1) {
				return ;
			}
			// Message to 'UserBias_itemUserIds_observation_' from GetItems factor
			this.UserBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBiasPrior, this.UserBias_itemUserIds_observation__B, this.userIds, this.UserBias_use_F_marginal);
			for(int observation = 0; observation<this.observationCount; observation++) {
				// Message to 'UserBias_itemUserIds_observation_' from GetItems factor
				this.UserBias_itemUserIds_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.UserBias_itemUserIds_observation__B[observation], this.userBiasPrior, this.UserBias_use_F_marginal, this.userIds, observation, this.UserBias_itemUserIds_observation__F[observation]);
				// Message to 'vdouble138' from Product_SHG09 factor
				this.vdouble138_F[observation] = GaussianProductOp_SHG09.ProductAverageConditional(this.UserBias_itemUserIds_observation__F[observation], 1.0, this.UserBias_itemUserIds_observation__B[observation]);
			}
			this.Changed_UserBiasPrior_UserIds_ObservationCount_iterationsDone = 1;
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserBiasPrior and UserIds and ItemBiasPrior and ItemIds</summary>
		private void Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds()
		{
			if (this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				// Message to 'vdouble142' from Plus factor
				this.vdouble142_F[observation] = DoublePlusOp.SumAverageConditional(this.vdouble138_F[observation], this.vdouble141_F[observation]);
			}
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_iterationsDone = 1;
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserBiasPrior and UserIds and ItemBiasPrior and ItemIds and TraitCount and UserTraitsPrior and ItemTraitsPrior</summary>
		private void Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16()
		{
			if (this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				// Message to 'vdouble144' from Plus factor
				this.vdouble144_F[observation] = DoublePlusOp.SumAverageConditional(this.vdouble142_F[observation], this.vdouble143_F[observation]);
			}
			this.Changed_ObservationCount_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCount_UserTraitsPrior_Item16_iterationsDone = 1;
			this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and AffinityNoiseVariance and UserBiasPrior and UserIds and ItemBiasPrior and ItemIds and TraitCount and UserTraitsPrior and ItemTraitsPrior</summary>
		private void Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17()
		{
			if (this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				// Message to 'vdouble145' from GaussianFromMeanAndVariance factor
				this.vdouble145_F[observation] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.vdouble144_F[observation], this.affinityNoiseVariance);
			}
			this.Changed_ObservationCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrior_ItemIds_TraitCoun17_iterationsDone = 1;
			this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of UserThresholdCount</summary>
		private void Changed_UserThresholdCount()
		{
			if (this.Changed_UserThresholdCount_iterationsDone==1) {
				return ;
			}
			this.vint44 = Factor.Difference(this.userThresholdCount, 1);
			this.Changed_UserThresholdCount_iterationsDone = 1;
			this.Changed_ObservationCount_UserThresholdCount_iterationsDone = 0;
			this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
			this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserThresholdCount</summary>
		private void Changed_ObservationCount_UserThresholdCount()
		{
			if (this.Changed_ObservationCount_UserThresholdCount_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.Ratings_F[observation] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint44));
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				this._hoist = ArrayHelper.CopyStorage<Discrete>(this.Ratings_F[observation]);
				observation = this.observationCount-1;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				this._hoist = DiscreteUniform.SampleAverageConditional(this.vint44, this._hoist);
				observation = this.observationCount-1;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				for(int _ind = 0; _ind<3; _ind++) {
					this.Ratings_observation__selector_uses_B[observation][_ind] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint44));
				}
				// Create array for 'Ratings_observation__selector_cases_depth1_uses' Backwards messages.
				this.Ratings_observation__selector_cases_depth1_uses_B[observation] = new DistributionStructArray<Bernoulli,bool>[this.vint44];
				for(int _iv = 0; _iv<this.vint44; _iv++) {
					// Create array for 'Ratings_observation__selector_cases_depth1_uses' Backwards messages.
					this.Ratings_observation__selector_cases_depth1_uses_B[observation][_iv] = new DistributionStructArray<Bernoulli,bool>(8);
					for(int _ind = 0; _ind<8; _ind++) {
						this.Ratings_observation__selector_cases_depth1_uses_B[observation][_iv][_ind] = Bernoulli.Uniform();
					}
				}
				// Create array for 'vdouble__71' Forwards messages.
				this.vdouble__71_F[observation] = new DistributionStructArray<Gaussian,double>(this.userThresholdCount);
				for(int userThreshold = 0; userThreshold<this.userThresholdCount; userThreshold++) {
					this.vdouble__71_F[observation][userThreshold] = Gaussian.Uniform();
				}
				// Create array for 'vdouble__72' Forwards messages.
				this.vdouble__72_F[observation] = new DistributionStructArray<Gaussian,double>(this.userThresholdCount);
				for(int userThreshold = 0; userThreshold<this.userThresholdCount; userThreshold++) {
					this.vdouble__72_F[observation][userThreshold] = Gaussian.Uniform();
				}
				// Create array for replicates of 'CurrentRating'
				this.CurrentRating[observation] = new int[this.vint44];
				for(int ratingValue = 0; ratingValue<this.vint44; ratingValue++) {
					this.CurrentRating[observation][ratingValue] = Factor.Plus(ratingValue, 0);
				}
				// Create array for replicates of 'NextRating'
				this.NextRating[observation] = new int[this.vint44];
				for(int ratingValue = 0; ratingValue<this.vint44; ratingValue++) {
					this.NextRating[observation][ratingValue] = Factor.Plus(ratingValue, 1);
				}
				// Create array for replicates of 'true_logZ'
				this.true_logZ[observation] = new double[this.vint44];
				// Create array for replicates of 'vbool7'
				this.vbool7[observation] = new bool[this.vint44];
				for(int ratingValue = 0; ratingValue<this.vint44; ratingValue++) {
					this.vbool7[observation][ratingValue] = true;
					// Message to 'Ratings_observation__selector_cases_depth1_uses' from Equal factor
					this.Ratings_observation__selector_cases_depth1_uses_B[observation][ratingValue][7] = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, this.vbool7[observation][ratingValue]));
				}
				// Create array for 'Ratings_observation__selector_cases_depth1' Backwards messages.
				this.Ratings_observation__selector_cases_depth1_B[observation] = new DistributionStructArray<Bernoulli,bool>(this.vint44);
				for(int _iv = 0; _iv<this.vint44; _iv++) {
					this.Ratings_observation__selector_cases_depth1_B[observation][_iv] = Bernoulli.Uniform();
				}
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				this._hoist4 = ArrayHelper.CopyStorage<Discrete>(this.Ratings_observation__selector_uses_B[observation][1]);
				observation = this.observationCount-1;
			}
			this._hoist9 = ReplicateOp_Divide.ToDefInit<Discrete>(this._hoist);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.Ratings_observation__selector_uses_B_toDef[observation] = ArrayHelper.CopyStorage<Discrete>(this._hoist9);
			}
			this.Changed_ObservationCount_UserThresholdCount_iterationsDone = 1;
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone = 0;
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 0;
			this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
			this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserThresholdCount and UserThresholdsPrior and UserIds</summary>
		private void Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds()
		{
			if (this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				for(int userThreshold = 0; userThreshold<this.userThresholdCount; userThreshold++) {
					// Message to 'vdouble__71' from Product_SHG09 factor
					this.vdouble__71_F[observation][userThreshold] = GaussianProductOp_SHG09.ProductAverageConditional(this.UserThresholds_itemUserIds_observation__F[observation][userThreshold], 1.0, this.UserThresholds_itemUserIds_observation__B[observation][userThreshold]);
				}
			}
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UserIds_iterationsDone = 1;
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserThresholdCount and UserThresholdNoiseVariance and UserThresholdsPrior and UserIds</summary>
		private void Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds()
		{
			if (this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				for(int userThreshold = 0; userThreshold<this.userThresholdCount; userThreshold++) {
					// Message to 'vdouble__72' from GaussianFromMeanAndVariance factor
					this.vdouble__72_F[observation][userThreshold] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.vdouble__71_F[observation][userThreshold], this.userThresholdNoiseVariance);
				}
			}
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_UserIds_iterationsDone = 1;
			this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserThresholdCount and AffinityNoiseVariance and UserBiasPrior and UserIds and ItemBiasPrior and ItemIds and TraitCount and UserTraitsPrior and ItemTraitsPrior and UserThresholdNoiseVariance and UserThresholdsPrior</summary>
		private void Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22()
		{
			if (this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone==1) {
				return ;
			}
			for(int observation = 0; observation<this.observationCount; observation++) {
				for(int ratingValue = 0; ratingValue<this.vint44; ratingValue++) {
					// Message to 'Ratings_observation__selector_cases_depth1_uses' from IsBetween factor
					this.true_logZ[observation][ratingValue] = DoubleIsBetweenOp.LogZ(Bernoulli.PointMass(true), this.vdouble145_F[observation], this.vdouble__72_F[observation][this.CurrentRating[observation][ratingValue]], this.vdouble__72_F[observation][this.NextRating[observation][ratingValue]]);
					// Message to 'Ratings_observation__selector_cases_depth1_uses' from IsBetween factor
					this.Ratings_observation__selector_cases_depth1_uses_B[observation][ratingValue][6] = Bernoulli.FromLogOdds(DoubleIsBetweenOp.LogEvidenceRatio(true, this.vdouble145_F[observation], this.vdouble__72_F[observation][this.CurrentRating[observation][ratingValue]], this.vdouble__72_F[observation][this.NextRating[observation][ratingValue]], this.true_logZ[observation][ratingValue]));
				}
				for(int _iv = 0; _iv<this.vint44; _iv++) {
					// Message to 'Ratings_observation__selector_cases_depth1' from Replicate factor
					this.Ratings_observation__selector_cases_depth1_B[observation][_iv] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Ratings_observation__selector_cases_depth1_uses_B[observation][_iv], this.Ratings_observation__selector_cases_depth1_B[observation][_iv]);
				}
				// Message to 'Ratings_observation__selector_uses' from CasesInt factor
				this.Ratings_observation__selector_uses_B[observation][0] = IntCasesOp.IAverageConditional(this.Ratings_observation__selector_cases_depth1_B[observation], this.Ratings_observation__selector_uses_B[observation][0]);
				// Message to 'Ratings_observation__selector_uses' from Replicate factor
				this.Ratings_observation__selector_uses_B_toDef[observation] = ReplicateOp_Divide.ToDef<Discrete>(this.Ratings_observation__selector_uses_B[observation], this.Ratings_observation__selector_uses_B_toDef[observation]);
			}
			this.Changed_ObservationCount_UserThresholdCount_AffinityNoiseVariance_UserBiasPrior_UserIds_ItemBiasPrio22_iterationsDone = 1;
			this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of UserCount and ItemCount and UserThresholdCount and ObservationCount and TraitCount and UserTraitsPrior and UserBiasPrior and UserThresholdsPrior and ItemTraitsPrior and ItemBiasPrior and UserIds and ItemIds and AffinityNoiseVariance and UserThresholdNoiseVariance</summary>
		private void Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4()
		{
			if (this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone==1) {
				return ;
			}
			// Create array for 'Ratings_marginal' Forwards messages.
			this.Ratings_marginal_F = new DistributionRefArray<Discrete,int>(this.observationCount);
			for(int observation = 0; observation<this.observationCount; observation++) {
				this.Ratings_marginal_F[observation] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint44));
				// Message to 'Ratings_marginal' from Variable factor
				this.Ratings_marginal_F[observation] = VariableOp.MarginalAverageConditional<Discrete>(this.Ratings_observation__selector_uses_B_toDef[observation], this._hoist, this.Ratings_marginal_F[observation]);
			}
			this.Changed_UserCount_ItemCount_UserThresholdCount_ObservationCount_TraitCount_UserTraitsPrior_UserBiasP4_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Ratings' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> RatingsMarginal()
		{
			return this.Ratings_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
