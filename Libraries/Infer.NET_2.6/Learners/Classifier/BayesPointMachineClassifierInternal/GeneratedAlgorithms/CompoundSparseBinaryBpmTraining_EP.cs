// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Factors;
using MicrosoftResearch.Infer.Collections;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 11:57 PM on Friday, November 14, 2014.
	/// </remarks>
	public partial class CompoundSparseBinaryBpmTraining_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		/// <summary>Field backing the InstanceFeatureCounts property</summary>
		private int[] instanceFeatureCounts;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		/// <summary>Field backing the FeatureIndexes property</summary>
		private int[][] featureIndexes;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionStructArray<Gaussian,double> weightConstraints;
		/// <summary>Field backing the WeightPrecisionRateConstraints property</summary>
		private DistributionStructArray<Gamma,double> weightPrecisionRateConstraints;
		/// <summary>Field backing the ZeroFeatureValueInstanceCounts property</summary>
		private double[] zeroFeatureValueInstanceCounts;
		/// <summary>Field backing the Labels property</summary>
		private bool[] labels;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount. Set this to zero to force re-execution of Changed_FeatureCount</summary>
		public int Changed_FeatureCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount. Set this to zero to force re-execution of Changed_InstanceCount</summary>
		public int Changed_InstanceCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_InstanceFeatureCounts. Set this to zero to force re-execution of Changed_InstanceCount_InstanceFeatureCounts</summary>
		public int Changed_InstanceCount_InstanceFeatureCounts_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4. Set this to zero to force re-execution of Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4</summary>
		public int Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_iterationsDone;
		/// <summary>True if Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4</summary>
		public bool Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5</summary>
		public int Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5</summary>
		public bool Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_InstanceFeatureCounts_FeatureValues. Set this to zero to force re-execution of Changed_InstanceCount_InstanceFeatureCounts_FeatureValues</summary>
		public int Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues. Set this to zero to force re-execution of Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues</summary>
		public int Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_ZeroFeatureValueInstanceCounts. Set this to zero to force re-execution of Changed_FeatureCount_ZeroFeatureValueInstanceCounts</summary>
		public int Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12. Set this to zero to force re-execution of Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12</summary>
		public int Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_iterationsDone;
		/// <summary>True if Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12 has performed initialisation. Set this to false to force re-execution of Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12</summary>
		public bool Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13. Set this to zero to force re-execution of Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13</summary>
		public int Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_iterationsDone;
		/// <summary>True if Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13 has performed initialisation. Set this to false to force re-execution of Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13</summary>
		public bool Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone;
		/// <summary>True if Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14 has performed initialisation. Set this to false to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14</summary>
		public bool Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_isInitialised;
		/// <summary>The number of iterations last computed by Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15. Set this to zero to force re-execution of Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15</summary>
		public int Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone;
		/// <summary>True if Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15 has performed initialisation. Set this to false to force re-execution of Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15</summary>
		public bool Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_isInitialised;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16</summary>
		public int Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone;
		public DistributionStructArray<Gaussian,double> Weights_F;
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> IndexedWeightPrecisionRates_B;
		public DistributionStructArray<Gamma,double> WeightPrecisions_F;
		public DistributionStructArray<Gamma,double> WeightPrecisions_B;
		public Gamma CommonWeightPrecision_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public Gamma CommonWeightPrecision_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public Gamma CommonWeightPrecision_rep_B_toDef;
		public Gamma _hoist;
		/// <summary>Message from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_use_B;
		/// <summary>Messages to use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] SharedWeightPrecisionRates_uses_F;
		/// <summary>Messages from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] SharedWeightPrecisionRates_uses_B;
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_depth0_uses_B;
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<DistributionStructArray<Gamma, double>></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_uses_B_toDef;
		/// <summary>Messages from use of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_uses_B;
		public Gamma _hoist2;
		public DistributionStructArray<Gaussian,double>[] Weights_depth0_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian, double>></summary>
		public DistributionStructArray<Gaussian,double> Weights_depth0_uses_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian, double>></summary>
		public DistributionStructArray<Gaussian,double> Weights_depth0_uses_B_toDef;
		public DistributionStructArray<Gaussian,double>[] Weights_depth0_uses_F;
		/// <summary>Buffer for JaggedSubarrayOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian, DistributionStructArray<Gaussian, double>></summary>
		public DistributionStructArray<Gaussian,double> Weights_depth0_uses_F_1__marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_FeatureIndexes_F;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_B;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_F;
		/// <summary>Message to marginal of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double> Weights_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> FeatureScores_F;
		public DistributionStructArray<Gaussian,double> Score_F;
		public DistributionStructArray<Gaussian,double> NoisyScore_F;
		/// <summary>Message from use of 'NoisyScore'</summary>
		public DistributionStructArray<Gaussian,double> NoisyScore_use_B;
		public DistributionStructArray<Gaussian,double> Score_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> FeatureScores_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> IndexedWeights_B;
		/// <summary>Buffer for GammaFromShapeAndRateOp_Laplace.SampleAverageConditional</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_B_FeatureRange__Q;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_uses_B_FeatureRange__toDef;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_uses_F_FeatureRange__marginal;
		/// <summary>Buffer for GammaRatioOp_Laplace.AAverageConditional</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_B_FeatureRange__Q;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
					this.Changed_InstanceCount_iterationsDone = 0;
					this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
					this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_iterationsDone = 0;
					this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
					this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
					this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
					this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
					this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
					this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
					this.Changed_FeatureCount_iterationsDone = 0;
					this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 0;
					this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
					this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
					this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_iterationsDone = 0;
					this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'InstanceFeatureCounts'</summary>
		public int[] InstanceFeatureCounts
		{
			get {
				return this.instanceFeatureCounts;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'InstanceFeatureCounts\'");
				}
				this.instanceFeatureCounts = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_iterationsDone = 0;
				this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'FeatureIndexes'</summary>
		public int[][] FeatureIndexes
		{
			get {
				return this.featureIndexes;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureIndexes\'");
				}
				this.featureIndexes = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
				this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionStructArray<Gaussian,double> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_iterationsDone = 0;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'WeightPrecisionRateConstraints'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRateConstraints
		{
			get {
				return this.weightPrecisionRateConstraints;
			}
			set {
				this.weightPrecisionRateConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ZeroFeatureValueInstanceCounts'</summary>
		public double[] ZeroFeatureValueInstanceCounts
		{
			get {
				return this.zeroFeatureValueInstanceCounts;
			}
			set {
				if ((value!=null)&&(value.Length!=this.featureCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.featureCount)+" was expected for variable \'ZeroFeatureValueInstanceCounts\'");
				}
				this.zeroFeatureValueInstanceCounts = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
				this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public bool[] Labels
		{
			get {
				return this.labels;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'Labels\'");
				}
				this.labels = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="InstanceFeatureCounts") {
				return this.InstanceFeatureCounts;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="FeatureIndexes") {
				return this.FeatureIndexes;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				return this.WeightPrecisionRateConstraints;
			}
			if (variableName=="ZeroFeatureValueInstanceCounts") {
				return this.ZeroFeatureValueInstanceCounts;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="InstanceFeatureCounts") {
				this.InstanceFeatureCounts = (int[])value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="FeatureIndexes") {
				this.FeatureIndexes = (int[][])value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				this.WeightPrecisionRateConstraints = (DistributionStructArray<Gamma,double>)value;
				return ;
			}
			if (variableName=="ZeroFeatureValueInstanceCounts") {
				this.ZeroFeatureValueInstanceCounts = (double[])value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="WeightPrecisionRates")&&(query=="MarginalDividedByPrior")) {
				return this.WeightPrecisionRatesMarginalDividedByPrior();
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone) {
				this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = false;
				this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
			}
			this.Constant();
			this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5(initialise);
			this.Changed_InstanceCount();
			this.Changed_InstanceCount_InstanceFeatureCounts();
			this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13(initialise);
			this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues();
			this.Changed_FeatureCount();
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts();
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues();
			this.Changed_WeightPrecisionRateConstraints_FeatureCount();
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9();
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11();
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4(initialise);
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14(initialise);
			this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12(initialise);
			this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15(initialise);
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			this.CommonWeightPrecision_F = Gamma.Uniform();
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.CommonWeightPrecision_F);
			// Create array for 'WeightPrecisionRates_depth0_uses' Backwards messages.
			this.WeightPrecisionRates_depth0_uses_B = new DistributionStructArray<Gamma,double>[2];
			// Create array for 'Weights_depth0_uses' Backwards messages.
			this.Weights_depth0_uses_B = new DistributionStructArray<Gaussian,double>[2];
			// Create array for 'Weights_depth0_uses' Forwards messages.
			this.Weights_depth0_uses_F = new DistributionStructArray<Gaussian,double>[2];
			this.Constant_iterationsDone = 1;
			this.Changed_FeatureCount_iterationsDone = 0;
			this.Changed_InstanceCount_iterationsDone = 0;
			this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_iterationsDone = 0;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised)) {
				return ;
			}
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.CommonWeightPrecision_F);
			// Message to 'CommonWeightPrecision' from GammaFromShapeAndRate factor
			this.CommonWeightPrecision_F = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
			this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_Fea5_isInitialised = true;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_iterationsDone==1) {
				return ;
			}
			// Create array for 'IndexedWeightPrecisionRates' Backwards messages.
			this.IndexedWeightPrecisionRates_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.instanceCount);
			// Create array for 'Weights_FeatureIndexes' Forwards messages.
			this.Weights_FeatureIndexes_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'FeatureScores_F'
			this.FeatureScores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'Score_F'
			this.Score_F = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_F[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'NoisyScore_F'
			this.NoisyScore_F = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_F[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'NoisyScore_use_B'
			this.NoisyScore_use_B = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_use_B[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Score_B'
			this.Score_B = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_B[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'FeatureScores_B'
			this.FeatureScores_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'IndexedWeights_B'
			this.IndexedWeights_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.Changed_InstanceCount_iterationsDone = 1;
			this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and InstanceFeatureCounts</summary>
		private void Changed_InstanceCount_InstanceFeatureCounts()
		{
			if (this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone==1) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				// Create array for 'IndexedWeightPrecisionRates' Backwards messages.
				this.IndexedWeightPrecisionRates_B[InstanceRange] = new DistributionStructArray<Gamma,double>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.IndexedWeightPrecisionRates_B[InstanceRange][InstanceFeatureRanges] = Gamma.Uniform();
				}
				// Create array for 'Weights_FeatureIndexes' Forwards messages.
				this.Weights_FeatureIndexes_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.Weights_FeatureIndexes_F[InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
				}
				// Create array for 'FeatureScores' Forwards messages.
				this.FeatureScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.FeatureScores_F[InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
				}
				// Create array for 'FeatureScores' Backwards messages.
				this.FeatureScores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.FeatureScores_B[InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
				}
				// Create array for 'IndexedWeights' Backwards messages.
				this.IndexedWeights_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
			}
			this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 1;
			this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
			this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and InstanceFeatureCounts and must reset on changes to numberOfIterationsDecreased and FeatureCount and FeatureIndexes and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13(bool initialise)
		{
			if ((this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_iterationsDone==1)&&((!initialise)||this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.IndexedWeights_B[InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
				}
			}
			this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_iterationsDone = 1;
			this.Changed_InstanceCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount_FeatureInd13_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and InstanceFeatureCounts and FeatureValues</summary>
		private void Changed_InstanceCount_InstanceFeatureCounts_FeatureValues()
		{
			if (this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone==1) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					// Message to 'IndexedWeightPrecisionRates' from Gaussian factor
					this.IndexedWeightPrecisionRates_B[InstanceRange][InstanceFeatureRanges] = GaussianOpBase.PrecisionAverageConditional(this.featureValues[InstanceRange][InstanceFeatureRanges], 0.0);
				}
			}
			this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 1;
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount</summary>
		private void Changed_FeatureCount()
		{
			if (this.Changed_FeatureCount_iterationsDone==1) {
				return ;
			}
			// Create array for 'Weights' Forwards messages.
			this.Weights_F = new DistributionStructArray<Gaussian,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_F[FeatureRange] = Gaussian.Uniform();
			}
			// Create array for 'SharedWeightPrecisionRates' Forwards messages.
			this.SharedWeightPrecisionRates_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_F[FeatureRange] = Gamma.Uniform();
			}
			// Create array for 'WeightPrecisions' Forwards messages.
			this.WeightPrecisions_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'WeightPrecisions' Backwards messages.
			this.WeightPrecisions_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_F[FeatureRange] = Gamma.Uniform();
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist = Gamma.Uniform();
				FeatureRange = this.featureCount-1;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
				FeatureRange = this.featureCount-1;
			}
			// Create array for 'SharedWeightPrecisionRates_use' Backwards messages.
			this.SharedWeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'SharedWeightPrecisionRates_uses' Forwards messages.
			this.SharedWeightPrecisionRates_uses_F = new DistributionStructArray<Gamma,double>[this.featureCount];
			// Create array for 'SharedWeightPrecisionRates_uses' Backwards messages.
			this.SharedWeightPrecisionRates_uses_B = new DistributionStructArray<Gamma,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'SharedWeightPrecisionRates_uses' Forwards messages.
				this.SharedWeightPrecisionRates_uses_F[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				// Create array for 'SharedWeightPrecisionRates_uses' Backwards messages.
				this.SharedWeightPrecisionRates_uses_B[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][_ind] = Gamma.Uniform();
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][_ind] = Gamma.Uniform();
				}
			}
			// Create array for replicates of 'SharedWeightPrecisionRates_B_FeatureRange__Q'
			this.SharedWeightPrecisionRates_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int _ind = 0; _ind<2; _ind++) {
				// Create array for 'WeightPrecisionRates_depth0_uses' Backwards messages.
				this.WeightPrecisionRates_depth0_uses_B[_ind] = new DistributionStructArray<Gamma,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_depth0_uses_B[_ind][FeatureRange] = Gamma.Uniform();
				}
			}
			// Create array for 'WeightPrecisionRates_depth0' Forwards messages.
			this.WeightPrecisionRates_depth0_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_F[FeatureRange] = Gamma.Uniform();
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from Replicate factor
			this.WeightPrecisionRates_depth0_uses_B_toDef = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_F);
			// Create array for 'WeightPrecisionRates_uses' Backwards messages.
			this.WeightPrecisionRates_uses_B = new DistributionStructArray<Gamma,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'WeightPrecisionRates_uses' Backwards messages.
				this.WeightPrecisionRates_uses_B[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.WeightPrecisionRates_uses_B[FeatureRange][_ind] = Gamma.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist2 = Gamma.Uniform();
				FeatureRange = this.featureCount-1;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist2 = GaussianOpBase.PrecisionAverageConditional(0.0, 0.0);
				FeatureRange = this.featureCount-1;
			}
			// Create array for replicates of 'WeightPrecisionRates_uses_B_FeatureRange__toDef'
			this.WeightPrecisionRates_uses_B_FeatureRange__toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			// Create array for replicates of 'WeightPrecisionRates_uses_F_FeatureRange__marginal'
			this.WeightPrecisionRates_uses_F_FeatureRange__marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_F_FeatureRange__marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			for(int _ind = 0; _ind<2; _ind++) {
				// Create array for 'Weights_depth0_uses' Backwards messages.
				this.Weights_depth0_uses_B[_ind] = new DistributionStructArray<Gaussian,double>(this.featureCount);
			}
			// Message to 'Weights_depth0_uses' from Replicate factor
			this.Weights_depth0_uses_F_marginal = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.Weights_F);
			// Message to 'Weights_depth0_uses' from Replicate factor
			this.Weights_depth0_uses_B_toDef = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.Weights_F);
			for(int _ind = 0; _ind<2; _ind++) {
				// Create array for 'Weights_depth0_uses' Forwards messages.
				this.Weights_depth0_uses_F[_ind] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_depth0_uses_F[_ind][FeatureRange] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'WeightPrecisions_B_FeatureRange__Q'
			this.WeightPrecisions_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'CommonWeightPrecision_rep' Backwards messages.
			this.CommonWeightPrecision_rep_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'CommonWeightPrecision_rep' Forwards messages.
			this.CommonWeightPrecision_rep_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.CommonWeightPrecision_rep_F[FeatureRange] = Gamma.Uniform();
			}
			// Create array for 'Weights_marginal' Forwards messages.
			this.Weights_marginal_F = new DistributionStructArray<Gaussian,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_marginal_F[FeatureRange] = Gaussian.Uniform();
			}
			this.Changed_FeatureCount_iterationsDone = 1;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 0;
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
			this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and ZeroFeatureValueInstanceCounts</summary>
		private void Changed_FeatureCount_ZeroFeatureValueInstanceCounts()
		{
			if (this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone==1) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Enter factor
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = PowerPlateOp.ValueAverageConditional<Gamma>(this._hoist2, this.zeroFeatureValueInstanceCounts[FeatureRange], this.WeightPrecisionRates_uses_B[FeatureRange][1]);
			}
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureIndexes and FeatureCount and InstanceCount and InstanceFeatureCounts and FeatureValues</summary>
		private void Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues()
		{
			if (this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone==1) {
				return ;
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from JaggedSubarray factor
			this.WeightPrecisionRates_depth0_uses_B[1] = JaggedSubarrayOp<double>.ArrayAverageConditional<Gamma,DistributionStructArray<Gamma,double>,DistributionStructArray<Gamma,double>>(this.IndexedWeightPrecisionRates_B, this.featureIndexes, this.WeightPrecisionRates_depth0_uses_B[1]);
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount</summary>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount()
		{
			if (this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone==1) {
				return ;
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from EqualRandom factor
			this.WeightPrecisionRates_depth0_uses_B[0] = ArrayHelper.SetTo<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B[0], this.weightPrecisionRateConstraints);
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues</summary>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9()
		{
			if (this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone==1) {
				return ;
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from Replicate factor
			this.WeightPrecisionRates_depth0_uses_B_toDef = ReplicateOp_Divide.ToDef<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B, this.WeightPrecisionRates_depth0_uses_B_toDef);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Copy factor
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][0], this.WeightPrecisionRates_depth0_uses_B_toDef[FeatureRange]);
			}
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun9_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and ZeroFeatureValueInstanceCounts</summary>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11()
		{
			if (this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone==1) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange]);
				// Message to 'SharedWeightPrecisionRates_uses' from Copy factor
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange]);
			}
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginalDividedByPrior()
		{
			return this.WeightPrecisionRates_uses_B_FeatureRange__toDef;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and must reset on changes to numberOfIterationsDecreased and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4(bool initialise)
		{
			if ((this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_B[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				for(int _ind = 0; _ind<2; _ind++) {
					this.Weights_depth0_uses_B[_ind][FeatureRange] = Gaussian.Uniform();
				}
			}
			// Message to 'Weights_FeatureIndexes' from JaggedSubarray factor
			this.Weights_depth0_uses_F_1__marginal = JaggedSubarrayOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_F[1]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.CommonWeightPrecision_rep_B[FeatureRange] = Gamma.Uniform();
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
				// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist);
				// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
				this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
			}
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_iterationsDone = 1;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_InstanceFeatureCo4_isInitialised = true;
			this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 0;
			this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and ZeroFeatureValueInstanceCounts and must reset on changes to numberOfIterationsDecreased and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14(bool initialise)
		{
			if ((this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone==1)&&((!initialise)||this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'SharedWeightPrecisionRates_uses' from Replicate factor
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				// Message to 'WeightPrecisions' from Ratio factor
				this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
			}
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun14_isInitialised = true;
			this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightConstraints and FeatureCount and must reset on changes to numberOfIterationsDecreased and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12(bool initialise)
		{
			if ((this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_iterationsDone==1)&&((!initialise)||this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised)) {
				return ;
			}
			// Message to 'Weights_depth0_uses' from EqualRandom factor
			this.Weights_depth0_uses_B[0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_B[0], this.weightConstraints);
			// Message to 'Weights_depth0_uses' from Replicate factor
			this.Weights_depth0_uses_B_toDef = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_B, this.Weights_depth0_uses_B_toDef);
			this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_iterationsDone = 1;
			this.Changed_WeightConstraints_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount12_isInitialised = true;
			this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightConstraints and FeatureCount and WeightPrecisionRateConstraints and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and ZeroFeatureValueInstanceCounts and must reset on changes to numberOfIterationsDecreased and Labels</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15(bool initialise)
		{
			if ((this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone==1)&&((!initialise)||this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisions' from Gaussian factor
				this.WeightPrecisions_B[FeatureRange] = GaussianOp.PrecisionAverageConditional(this.Weights_depth0_uses_B_toDef[FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_F[FeatureRange]);
			}
			this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_iterationsDone = 1;
			this.Changed_WeightConstraints_FeatureCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_I15_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone==numberOfIterations) {
				return ;
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
					this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist);
					// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
					this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
					// Message to 'SharedWeightPrecisionRates_uses' from Replicate factor
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'WeightPrecisions' from Ratio factor
					this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'Weights' from Gaussian factor
					this.Weights_F[FeatureRange] = GaussianOp.SampleAverageConditional(this.Weights_depth0_uses_B_toDef[FeatureRange], 0.0, this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_B[FeatureRange]);
				}
				// Message to 'Weights_depth0_uses' from Replicate factor
				this.Weights_depth0_uses_F_marginal = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_B_toDef, this.Weights_F, this.Weights_depth0_uses_F_marginal);
				// Message to 'Weights_depth0_uses' from Replicate factor
				this.Weights_depth0_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_B[1], this.Weights_depth0_uses_F_marginal, 1, this.Weights_depth0_uses_F[1]);
				// Message to 'Weights_FeatureIndexes' from JaggedSubarray factor
				this.Weights_depth0_uses_F_1__marginal = JaggedSubarrayOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian,object,DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_F[1], this.IndexedWeights_B, this.featureIndexes, this.Weights_depth0_uses_F_1__marginal);
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					// Message to 'Weights_FeatureIndexes' from JaggedSubarray factor
					this.Weights_FeatureIndexes_F[InstanceRange] = JaggedSubarrayOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.IndexedWeights_B[InstanceRange], this.Weights_depth0_uses_F[1], this.Weights_depth0_uses_F_1__marginal, this.featureIndexes, InstanceRange, this.Weights_FeatureIndexes_F[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						// Message to 'FeatureScores' from Product factor
						this.FeatureScores_F[InstanceRange][InstanceFeatureRanges] = GaussianProductOp.ProductAverageConditional(this.featureValues[InstanceRange][InstanceFeatureRanges], this.Weights_FeatureIndexes_F[InstanceRange][InstanceFeatureRanges]);
					}
					// Message to 'Score' from Sum factor
					this.Score_F[InstanceRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange]);
					// Message to 'NoisyScore' from GaussianFromMeanAndVariance factor
					this.NoisyScore_F[InstanceRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Score_F[InstanceRange], 1.0);
					// Message to 'NoisyScore_use' from IsPositive factor
					this.NoisyScore_use_B[InstanceRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.labels[InstanceRange]), this.NoisyScore_F[InstanceRange]);
					// Message to 'Score' from GaussianFromMeanAndVariance factor
					this.Score_B[InstanceRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScore_use_B[InstanceRange], 1.0);
					// Message to 'FeatureScores' from Sum factor
					this.FeatureScores_B[InstanceRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Score_B[InstanceRange], this.Score_F[InstanceRange], this.FeatureScores_F[InstanceRange], this.FeatureScores_B[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						// Message to 'IndexedWeights' from Product factor
						this.IndexedWeights_B[InstanceRange][InstanceFeatureRanges] = GaussianProductOp.BAverageConditional(this.FeatureScores_B[InstanceRange][InstanceFeatureRanges], this.featureValues[InstanceRange][InstanceFeatureRanges]);
					}
					this.Weights_depth0_uses_F_1__marginal = JaggedSubarrayOp<double>.MarginalIncrement<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_F_1__marginal, this.Weights_FeatureIndexes_F[InstanceRange], this.IndexedWeights_B[InstanceRange], this.featureIndexes, InstanceRange);
				}
				// Message to 'Weights_depth0_uses' from JaggedSubarray factor
				this.Weights_depth0_uses_B[1] = JaggedSubarrayOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>,DistributionStructArray<Gaussian,double>>(this.IndexedWeights_B, this.featureIndexes, this.Weights_depth0_uses_B[1]);
				// Message to 'Weights_depth0_uses' from Replicate factor
				this.Weights_depth0_uses_B_toDef = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.Weights_depth0_uses_B, this.Weights_depth0_uses_B_toDef);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'WeightPrecisions' from Gaussian factor
					this.WeightPrecisions_B[FeatureRange] = GaussianOp.PrecisionAverageConditional(this.Weights_depth0_uses_B_toDef[FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_F[FeatureRange]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.CommonWeightPrecision_rep_B[FeatureRange] = GammaRatioOp_Laplace.AAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
				}
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_rep_B_toDef);
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'CommonWeightPrecision_rep' from Replicate factor
					this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'SharedWeightPrecisionRates_uses' from Ratio factor
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = GammaRatioOp_Laplace.BAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
					// Message to 'SharedWeightPrecisionRates_use' from Replicate factor
					this.SharedWeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_use_B[FeatureRange]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'Weights_marginal' from Variable factor
				this.Weights_marginal_F[FeatureRange] = VariableOp.MarginalAverageConditional<Gaussian>(this.Weights_depth0_uses_B_toDef[FeatureRange], this.Weights_F[FeatureRange], this.Weights_marginal_F[FeatureRange]);
			}
			this.Changed_numberOfIterationsDecreased_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCounts_16_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginalDividedByPrior()
		{
			return this.Weights_depth0_uses_B_toDef;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
