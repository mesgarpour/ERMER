// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Factors;
using MicrosoftResearch.Infer.Collections;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 11:57 PM on Friday, November 14, 2014.
	/// </remarks>
	public partial class CompoundSparseMulticlassBpmTraining_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		/// <summary>Field backing the InstanceFeatureCounts property</summary>
		private int[] instanceFeatureCounts;
		/// <summary>Field backing the ClassCount property</summary>
		private int classCount;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		/// <summary>Field backing the FeatureIndexes property</summary>
		private int[][] featureIndexes;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> weightConstraints;
		/// <summary>Field backing the WeightPrecisionRateConstraints property</summary>
		private DistributionStructArray<Gamma,double> weightPrecisionRateConstraints;
		/// <summary>Field backing the ZeroFeatureValueInstanceCounts property</summary>
		private double[] zeroFeatureValueInstanceCounts;
		/// <summary>Field backing the Labels property</summary>
		private int[] labels;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount. Set this to zero to force re-execution of Changed_FeatureCount</summary>
		public int Changed_FeatureCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount. Set this to zero to force re-execution of Changed_InstanceCount</summary>
		public int Changed_InstanceCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_InstanceFeatureCounts. Set this to zero to force re-execution of Changed_InstanceCount_InstanceFeatureCounts</summary>
		public int Changed_InstanceCount_InstanceFeatureCounts_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ClassCount. Set this to zero to force re-execution of Changed_ClassCount</summary>
		public int Changed_ClassCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ClassCount_FeatureCount. Set this to zero to force re-execution of Changed_ClassCount_FeatureCount</summary>
		public int Changed_ClassCount_FeatureCount_iterationsDone;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6</summary>
		public int Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6</summary>
		public bool Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7. Set this to zero to force re-execution of Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7</summary>
		public int Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_iterationsDone;
		/// <summary>True if Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7</summary>
		public bool Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_InstanceFeatureCounts_FeatureValues. Set this to zero to force re-execution of Changed_InstanceCount_InstanceFeatureCounts_FeatureValues</summary>
		public int Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues. Set this to zero to force re-execution of Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues</summary>
		public int Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_ZeroFeatureValueInstanceCounts. Set this to zero to force re-execution of Changed_FeatureCount_ZeroFeatureValueInstanceCounts</summary>
		public int Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14. Set this to zero to force re-execution of Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14</summary>
		public int Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_iterationsDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14</summary>
		public bool Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised;
		/// <summary>The number of iterations last computed by Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15. Set this to zero to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15</summary>
		public int Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15</summary>
		public bool Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised;
		/// <summary>The number of iterations last computed by Changed_ClassCount_InstanceCount. Set this to zero to force re-execution of Changed_ClassCount_InstanceCount</summary>
		public int Changed_ClassCount_InstanceCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_ClassCount_InstanceCount_InstanceFeatureCounts. Set this to zero to force re-execution of Changed_ClassCount_InstanceCount_InstanceFeatureCounts</summary>
		public int Changed_ClassCount_InstanceCount_InstanceFeatureCounts_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_ClassCount_Labels. Set this to zero to force re-execution of Changed_InstanceCount_ClassCount_Labels</summary>
		public int Changed_InstanceCount_ClassCount_Labels_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19. Set this to zero to force re-execution of Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19</summary>
		public int Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone;
		/// <summary>True if Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19 has performed initialisation. Set this to false to force re-execution of Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19</summary>
		public bool Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20. Set this to zero to force re-execution of Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20</summary>
		public int Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_iterationsDone;
		/// <summary>True if Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20 has performed initialisation. Set this to false to force re-execution of Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20</summary>
		public bool Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised;
		/// <summary>The number of iterations last computed by Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21. Set this to zero to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21</summary>
		public int Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone;
		/// <summary>True if Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21 has performed initialisation. Set this to false to force re-execution of Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21</summary>
		public bool Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_isInitialised;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22. Set this to zero to force re-execution of Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22</summary>
		public int Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone;
		/// <summary>True if Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22</summary>
		public bool Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_isInitialised;
		/// <summary>The number of iterations last computed by Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23. Set this to zero to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23</summary>
		public int Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23</summary>
		public bool Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_isInitialised;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24</summary>
		public int Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone;
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> IndexedWeightPrecisionRates_B;
		public DistributionStructArray<Gamma,double> WeightPrecisions_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeights_F;
		public Gamma CommonWeightPrecision_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public Gamma CommonWeightPrecision_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public Gamma CommonWeightPrecision_rep_B_toDef;
		public Gamma _hoist;
		/// <summary>Message from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_use_B;
		/// <summary>Messages to use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] SharedWeightPrecisionRates_uses_F;
		/// <summary>Messages from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] SharedWeightPrecisionRates_uses_B;
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_depth0_uses_B;
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<DistributionStructArray<Gamma, double>></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_uses_B_toDef;
		/// <summary>Messages from use of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_uses_B;
		public Gamma _hoist2;
		/// <summary>Messages from use of 'Weights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] Weights_uses_B;
		/// <summary>Messages to use of 'SharedWeights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] SharedWeights_uses_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> TransposedWeights_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> TransposedWeights_B;
		/// <summary>Messages from use of 'SharedWeights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] SharedWeights_uses_B;
		/// <summary>Messages to use of 'Weights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] Weights_uses_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth1_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth1_B;
		/// <summary>Message from use of 'SharedWeights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeights_use_B;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_B;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_F;
		/// <summary>Message to marginal of 'Weights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_uses_F_ClassRange__FeatureRange__marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_uses_B_ClassRange__FeatureRange__toDef;
		/// <summary>Buffer for JaggedSubarrayOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian, DistributionStructArray<Gaussian, double>></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth1_F_ClassRange__marginal;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Weights_FeatureIndexes_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Weights_FeatureIndexes_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> FeatureScores_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Scores_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> NoisyScores_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gaussian></summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef;
		public DistributionStructArray<Gaussian,double>[][][] NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> MaxNoisyScore_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> MaxNoisyScore_rep_B_toDef;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_rep_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScoreDeltas_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScoreDeltas_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B;
		public DistributionStructArray<Gaussian,double>[][][] NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_0__B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_rep_B;
		/// <summary>Message from use of 'NoisyScores'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> NoisyScores_use_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Scores_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> FeatureScores_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> IndexedWeights_B;
		/// <summary>Buffer for GammaFromShapeAndRateOp_Laplace.SampleAverageConditional</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_B_FeatureRange__Q;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_uses_B_FeatureRange__toDef;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_uses_F_FeatureRange__marginal;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisions_rep_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisions_rep_B;
		/// <summary>Buffer for GammaRatioOp_Laplace.AAverageConditional</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_B_FeatureRange__Q;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
					this.Changed_InstanceCount_iterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_iterationsDone = 0;
					this.Changed_InstanceCount_ClassCount_Labels_iterationsDone = 0;
					this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
					this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_iterationsDone = 0;
					this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
					this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
					this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
					this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
					this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
					this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
					this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
					this.Changed_FeatureCount_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone = 0;
					this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 0;
					this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
					this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_iterationsDone = 0;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
					this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'InstanceFeatureCounts'</summary>
		public int[] InstanceFeatureCounts
		{
			get {
				return this.instanceFeatureCounts;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'InstanceFeatureCounts\'");
				}
				this.instanceFeatureCounts = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_iterationsDone = 0;
				this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
				this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
				this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ClassCount'</summary>
		public int ClassCount
		{
			get {
				return this.classCount;
			}
			set {
				if (this.classCount!=value) {
					this.classCount = value;
					this.numberOfIterationsDone = 0;
					this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
					this.Changed_ClassCount_iterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_iterationsDone = 0;
					this.Changed_InstanceCount_ClassCount_Labels_iterationsDone = 0;
					this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
					this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone = 0;
					this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
					this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_isInitialised = false;
					this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
				this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
				this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'FeatureIndexes'</summary>
		public int[][] FeatureIndexes
		{
			get {
				return this.featureIndexes;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureIndexes\'");
				}
				this.featureIndexes = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
				this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_isInitialised = false;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'WeightPrecisionRateConstraints'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRateConstraints
		{
			get {
				return this.weightPrecisionRateConstraints;
			}
			set {
				this.weightPrecisionRateConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ZeroFeatureValueInstanceCounts'</summary>
		public double[] ZeroFeatureValueInstanceCounts
		{
			get {
				return this.zeroFeatureValueInstanceCounts;
			}
			set {
				if ((value!=null)&&(value.Length!=this.featureCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.featureCount)+" was expected for variable \'ZeroFeatureValueInstanceCounts\'");
				}
				this.zeroFeatureValueInstanceCounts = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
				this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 0;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public int[] Labels
		{
			get {
				return this.labels;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'Labels\'");
				}
				this.labels = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_iterationsDone = 0;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone = 0;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_isInitialised = false;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="InstanceFeatureCounts") {
				return this.InstanceFeatureCounts;
			}
			if (variableName=="ClassCount") {
				return this.ClassCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="FeatureIndexes") {
				return this.FeatureIndexes;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				return this.WeightPrecisionRateConstraints;
			}
			if (variableName=="ZeroFeatureValueInstanceCounts") {
				return this.ZeroFeatureValueInstanceCounts;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="InstanceFeatureCounts") {
				this.InstanceFeatureCounts = (int[])value;
				return ;
			}
			if (variableName=="ClassCount") {
				this.ClassCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="FeatureIndexes") {
				this.FeatureIndexes = (int[][])value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				this.WeightPrecisionRateConstraints = (DistributionStructArray<Gamma,double>)value;
				return ;
			}
			if (variableName=="ZeroFeatureValueInstanceCounts") {
				this.ZeroFeatureValueInstanceCounts = (double[])value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (int[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="WeightPrecisionRates")&&(query=="MarginalDividedByPrior")) {
				return this.WeightPrecisionRatesMarginalDividedByPrior();
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone) {
				this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = false;
				this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = false;
				this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_isInitialised = false;
				this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
			}
			this.Constant();
			this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6(initialise);
			this.Changed_ClassCount();
			this.Changed_InstanceCount();
			this.Changed_ClassCount_InstanceCount();
			this.Changed_InstanceCount_ClassCount_Labels();
			this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19(initialise);
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts();
			this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20(initialise);
			this.Changed_InstanceCount_InstanceFeatureCounts();
			this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues();
			this.Changed_FeatureCount();
			this.Changed_ClassCount_FeatureCount();
			this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14(initialise);
			this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15(initialise);
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts();
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues();
			this.Changed_WeightPrecisionRateConstraints_FeatureCount();
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11();
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13();
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7(initialise);
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21(initialise);
			this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22(initialise);
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23(initialise);
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			this.CommonWeightPrecision_F = Gamma.Uniform();
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.CommonWeightPrecision_F);
			// Create array for 'WeightPrecisionRates_depth0_uses' Backwards messages.
			this.WeightPrecisionRates_depth0_uses_B = new DistributionStructArray<Gamma,double>[2];
			this.Constant_iterationsDone = 1;
			this.Changed_FeatureCount_iterationsDone = 0;
			this.Changed_InstanceCount_iterationsDone = 0;
			this.Changed_ClassCount_iterationsDone = 0;
			this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and FeatureCount and ClassCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised)) {
				return ;
			}
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.CommonWeightPrecision_F);
			// Message to 'CommonWeightPrecision' from GammaFromShapeAndRate factor
			this.CommonWeightPrecision_F = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
			this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFeatur6_isInitialised = true;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ClassCount</summary>
		private void Changed_ClassCount()
		{
			if (this.Changed_ClassCount_iterationsDone==1) {
				return ;
			}
			// Create array for 'SharedWeights' Forwards messages.
			this.SharedWeights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			// Create array for 'Weights_uses' Backwards messages.
			this.Weights_uses_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[this.classCount];
			// Create array for 'SharedWeights_uses' Forwards messages.
			this.SharedWeights_uses_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[this.classCount];
			// Create array for replicates of 'Weights_uses_F_ClassRange__FeatureRange__marginal'
			this.Weights_uses_F_ClassRange__FeatureRange__marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			// Create array for replicates of 'Weights_uses_B_ClassRange__FeatureRange__toDef'
			this.Weights_uses_B_ClassRange__FeatureRange__toDef = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			// Create array for 'SharedWeights_uses' Backwards messages.
			this.SharedWeights_uses_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[this.classCount];
			// Create array for 'Weights_uses' Forwards messages.
			this.Weights_uses_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[this.classCount];
			// Create array for 'Weights_depth1' Forwards messages.
			this.Weights_depth1_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			// Create array for replicates of 'Weights_depth1_F_ClassRange__marginal'
			this.Weights_depth1_F_ClassRange__marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			// Create array for replicates of 'Weights_FeatureIndexes_F'
			this.Weights_FeatureIndexes_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.classCount);
			// Create array for replicates of 'Weights_FeatureIndexes_B'
			this.Weights_FeatureIndexes_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.classCount);
			// Create array for 'Weights_depth1' Backwards messages.
			this.Weights_depth1_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			// Create array for 'SharedWeights_use' Backwards messages.
			this.SharedWeights_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			// Create array for 'Weights_marginal' Forwards messages.
			this.Weights_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Changed_ClassCount_iterationsDone = 1;
			this.Changed_ClassCount_FeatureCount_iterationsDone = 0;
			this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_iterationsDone = 0;
			this.Changed_ClassCount_InstanceCount_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_iterationsDone==1) {
				return ;
			}
			// Create array for 'IndexedWeightPrecisionRates' Backwards messages.
			this.IndexedWeightPrecisionRates_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'FeatureScores_F'
			this.FeatureScores_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'Scores_F'
			this.Scores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'NoisyScores_F'
			this.NoisyScores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal'
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef'
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F'
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F = new DistributionStructArray<Gaussian,double>[this.instanceCount][][];
			// Create array for replicates of 'MaxNoisyScore_rep_F_marginal'
			this.MaxNoisyScore_rep_F_marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'MaxNoisyScore_rep_B_toDef'
			this.MaxNoisyScore_rep_B_toDef = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'MaxNoisyScore_rep_F'
			this.MaxNoisyScore_rep_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'NoisyScoreDeltas_F'
			this.NoisyScoreDeltas_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'NoisyScoreDeltas_B'
			this.NoisyScoreDeltas_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B'
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B'
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B = new DistributionStructArray<Gaussian,double>[this.instanceCount][][];
			// Create array for replicates of 'MaxNoisyScore_0__B'
			this.MaxNoisyScore_0__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'MaxNoisyScore_rep_B'
			this.MaxNoisyScore_rep_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'NoisyScores_use_B'
			this.NoisyScores_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'Scores_B'
			this.Scores_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'FeatureScores_B'
			this.FeatureScores_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			// Create array for replicates of 'IndexedWeights_B'
			this.IndexedWeights_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.Changed_InstanceCount_iterationsDone = 1;
			this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
			this.Changed_ClassCount_InstanceCount_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount</summary>
		private void Changed_ClassCount_InstanceCount()
		{
			if (this.Changed_ClassCount_InstanceCount_iterationsDone==1) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				// Create array for 'Weights_FeatureIndexes' Forwards messages.
				this.Weights_FeatureIndexes_F[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				// Create array for 'FeatureScores' Forwards messages.
				this.FeatureScores_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for 'Scores' Forwards messages.
				this.Scores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				// Create array for 'NoisyScores' Forwards messages.
				this.NoisyScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.NoisyScores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal'
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef'
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F'
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange] = new DistributionStructArray<Gaussian,double>[this.classCount][];
				// Create array for replicates of 'MaxNoisyScore_rep_F_marginal'
				this.MaxNoisyScore_rep_F_marginal[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				// Create array for replicates of 'MaxNoisyScore_rep_B_toDef'
				this.MaxNoisyScore_rep_B_toDef[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				// Create array for replicates of 'MaxNoisyScore_rep_F'
				this.MaxNoisyScore_rep_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for replicates of 'NoisyScoreDeltas_F'
				this.NoisyScoreDeltas_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for replicates of 'NoisyScoreDeltas_B'
				this.NoisyScoreDeltas_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B'
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B'
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange] = new DistributionStructArray<Gaussian,double>[this.classCount][];
				// Create array for replicates of 'MaxNoisyScore_0__B'
				this.MaxNoisyScore_0__B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for replicates of 'MaxNoisyScore_rep_B'
				this.MaxNoisyScore_rep_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for 'NoisyScores_use' Backwards messages.
				this.NoisyScores_use_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				// Create array for 'Scores' Backwards messages.
				this.Scores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				// Create array for 'FeatureScores' Backwards messages.
				this.FeatureScores_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				// Create array for 'IndexedWeights' Backwards messages.
				this.IndexedWeights_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				// Create array for 'Weights_FeatureIndexes' Backwards messages.
				this.Weights_FeatureIndexes_B[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			}
			this.Changed_ClassCount_InstanceCount_iterationsDone = 1;
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_iterationsDone = 0;
			this.Changed_InstanceCount_ClassCount_Labels_iterationsDone = 0;
			this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and ClassCount and Labels</summary>
		private void Changed_InstanceCount_ClassCount_Labels()
		{
			if (this.Changed_InstanceCount_ClassCount_Labels_iterationsDone==1) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal'
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Replicate factor
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassRange]);
						}
						// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef'
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
						// Create array for 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' Forwards messages.
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>[this.classCount];
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							// Create array for 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' Forwards messages.
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = new DistributionStructArray<Gaussian,double>(2);
							for(int _ind = 0; _ind<2; _ind++) {
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange][_ind] = Gaussian.Uniform();
							}
						}
						// Message to 'MaxNoisyScore_rep' from Replicate factor
						this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore][0]);
						// Create array for 'MaxNoisyScore_rep' Forwards messages.
						this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
						// Create array for replicates of 'NoisyScoreDeltas_F'
						this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
						// Create array for replicates of 'NoisyScoreDeltas_B'
						this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
						// Create array for replicates of 'NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B'
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
						// Create array for 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' Backwards messages.
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>[this.classCount];
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							// Create array for 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' Backwards messages.
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = new DistributionStructArray<Gaussian,double>(2);
						}
						// Create array for replicates of 'MaxNoisyScore_0__B'
						this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
						// Create array for 'MaxNoisyScore_rep' Backwards messages.
						this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.NoisyScores_use_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
			}
			this.Changed_InstanceCount_ClassCount_Labels_iterationsDone = 1;
			this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and ClassCount and Labels and must reset on changes to numberOfIterationsDecreased and FeatureCount and FeatureIndexes and InstanceFeatureCounts and FeatureValues and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19(bool initialise)
		{
			if ((this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone==1)&&((!initialise)||this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Replicate factor
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassRange]);
						}
						// Message to 'MaxNoisyScore_rep' from Replicate factor
						this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore][0]);
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							for(int _ind = 0; _ind<2; _ind++) {
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange][_ind] = Gaussian.Uniform();
							}
							this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
					}
				}
			}
			this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_iterationsDone = 1;
			this.Changed_InstanceCount_ClassCount_Labels_Init_numberOfIterationsDecreased_FeatureCount_FeatureIndexes19_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and InstanceFeatureCounts</summary>
		private void Changed_ClassCount_InstanceCount_InstanceFeatureCounts()
		{
			if (this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_iterationsDone==1) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					// Create array for 'Weights_FeatureIndexes' Forwards messages.
					this.Weights_FeatureIndexes_F[ClassRange][InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.Weights_FeatureIndexes_F[ClassRange][InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
					// Create array for 'FeatureScores' Forwards messages.
					this.FeatureScores_F[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.FeatureScores_F[InstanceRange][ClassRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
					// Create array for 'FeatureScores' Backwards messages.
					this.FeatureScores_B[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.FeatureScores_B[InstanceRange][ClassRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
					// Create array for 'IndexedWeights' Backwards messages.
					this.IndexedWeights_B[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					// Create array for 'Weights_FeatureIndexes' Backwards messages.
					this.Weights_FeatureIndexes_B[ClassRange][InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
				}
			}
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_iterationsDone = 1;
			this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and ClassCount and InstanceFeatureCounts and must reset on changes to numberOfIterationsDecreased and FeatureCount and FeatureIndexes and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20(bool initialise)
		{
			if ((this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_iterationsDone==1)&&((!initialise)||this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.IndexedWeights_B[InstanceRange][ClassRange][InstanceFeatureRanges] = Gaussian.Uniform();
						this.Weights_FeatureIndexes_B[ClassRange][InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_iterationsDone = 1;
			this.Changed_InstanceCount_ClassCount_InstanceFeatureCounts_Init_numberOfIterationsDecreased_FeatureCount20_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and InstanceFeatureCounts</summary>
		private void Changed_InstanceCount_InstanceFeatureCounts()
		{
			if (this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone==1) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				// Create array for 'IndexedWeightPrecisionRates' Backwards messages.
				this.IndexedWeightPrecisionRates_B[InstanceRange] = new DistributionStructArray<Gamma,double>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.IndexedWeightPrecisionRates_B[InstanceRange][InstanceFeatureRanges] = Gamma.Uniform();
				}
			}
			this.Changed_InstanceCount_InstanceFeatureCounts_iterationsDone = 1;
			this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and InstanceFeatureCounts and FeatureValues</summary>
		private void Changed_InstanceCount_InstanceFeatureCounts_FeatureValues()
		{
			if (this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone==1) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					// Message to 'IndexedWeightPrecisionRates' from Gaussian factor
					this.IndexedWeightPrecisionRates_B[InstanceRange][InstanceFeatureRanges] = GaussianOpBase.PrecisionAverageConditional(this.featureValues[InstanceRange][InstanceFeatureRanges], 0.0);
				}
			}
			this.Changed_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 1;
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount</summary>
		private void Changed_FeatureCount()
		{
			if (this.Changed_FeatureCount_iterationsDone==1) {
				return ;
			}
			// Create array for 'SharedWeightPrecisionRates' Forwards messages.
			this.SharedWeightPrecisionRates_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_F[FeatureRange] = Gamma.Uniform();
			}
			// Create array for 'WeightPrecisions' Forwards messages.
			this.WeightPrecisions_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_F[FeatureRange] = Gamma.Uniform();
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist = Gamma.Uniform();
				FeatureRange = this.featureCount-1;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
				FeatureRange = this.featureCount-1;
			}
			// Create array for 'SharedWeightPrecisionRates_use' Backwards messages.
			this.SharedWeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'SharedWeightPrecisionRates_uses' Forwards messages.
			this.SharedWeightPrecisionRates_uses_F = new DistributionStructArray<Gamma,double>[this.featureCount];
			// Create array for 'SharedWeightPrecisionRates_uses' Backwards messages.
			this.SharedWeightPrecisionRates_uses_B = new DistributionStructArray<Gamma,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'SharedWeightPrecisionRates_uses' Forwards messages.
				this.SharedWeightPrecisionRates_uses_F[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				// Create array for 'SharedWeightPrecisionRates_uses' Backwards messages.
				this.SharedWeightPrecisionRates_uses_B[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][_ind] = Gamma.Uniform();
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][_ind] = Gamma.Uniform();
				}
			}
			// Create array for replicates of 'SharedWeightPrecisionRates_B_FeatureRange__Q'
			this.SharedWeightPrecisionRates_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int _ind = 0; _ind<2; _ind++) {
				// Create array for 'WeightPrecisionRates_depth0_uses' Backwards messages.
				this.WeightPrecisionRates_depth0_uses_B[_ind] = new DistributionStructArray<Gamma,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_depth0_uses_B[_ind][FeatureRange] = Gamma.Uniform();
				}
			}
			// Create array for 'WeightPrecisionRates_depth0' Forwards messages.
			this.WeightPrecisionRates_depth0_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_F[FeatureRange] = Gamma.Uniform();
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from Replicate factor
			this.WeightPrecisionRates_depth0_uses_B_toDef = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_F);
			// Create array for 'WeightPrecisionRates_uses' Backwards messages.
			this.WeightPrecisionRates_uses_B = new DistributionStructArray<Gamma,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'WeightPrecisionRates_uses' Backwards messages.
				this.WeightPrecisionRates_uses_B[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.WeightPrecisionRates_uses_B[FeatureRange][_ind] = Gamma.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist2 = Gamma.Uniform();
				FeatureRange = this.featureCount-1;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist2 = GaussianOpBase.PrecisionAverageConditional(0.0, 0.0);
				FeatureRange = this.featureCount-1;
			}
			// Create array for replicates of 'WeightPrecisionRates_uses_B_FeatureRange__toDef'
			this.WeightPrecisionRates_uses_B_FeatureRange__toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			// Create array for replicates of 'WeightPrecisionRates_uses_F_FeatureRange__marginal'
			this.WeightPrecisionRates_uses_F_FeatureRange__marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_F_FeatureRange__marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			// Create array for replicates of 'WeightPrecisions_rep_F_marginal'
			this.WeightPrecisions_rep_F_marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisions_rep' from Replicate factor
				this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.WeightPrecisions_F[FeatureRange]);
			}
			// Create array for replicates of 'WeightPrecisions_rep_B_toDef'
			this.WeightPrecisions_rep_B_toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for replicates of 'WeightPrecisions_rep_F'
			this.WeightPrecisions_rep_F = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			// Create array for 'TransposedWeights' Forwards messages.
			this.TransposedWeights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			// Create array for 'TransposedWeights' Backwards messages.
			this.TransposedWeights_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			// Create array for replicates of 'WeightPrecisions_rep_B'
			this.WeightPrecisions_rep_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			// Create array for replicates of 'WeightPrecisions_B_FeatureRange__Q'
			this.WeightPrecisions_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'CommonWeightPrecision_rep' Backwards messages.
			this.CommonWeightPrecision_rep_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'CommonWeightPrecision_rep' Forwards messages.
			this.CommonWeightPrecision_rep_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.CommonWeightPrecision_rep_F[FeatureRange] = Gamma.Uniform();
			}
			this.Changed_FeatureCount_iterationsDone = 1;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 0;
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
			this.Changed_ClassCount_FeatureCount_iterationsDone = 0;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount</summary>
		private void Changed_ClassCount_FeatureCount()
		{
			if (this.Changed_ClassCount_FeatureCount_iterationsDone==1) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				// Create array for 'SharedWeights' Forwards messages.
				this.SharedWeights_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.SharedWeights_F[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'WeightPrecisions_rep' Forwards messages.
				this.WeightPrecisions_rep_F[FeatureRange] = new DistributionStructArray<Gamma,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = Gamma.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				// Create array for 'Weights_uses' Backwards messages.
				this.Weights_uses_B[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Create array for 'Weights_uses' Backwards messages.
					this.Weights_uses_B[ClassRange][FeatureRange] = new DistributionStructArray<Gaussian,double>(2);
				}
				// Create array for 'SharedWeights_uses' Forwards messages.
				this.SharedWeights_uses_F[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Create array for 'SharedWeights_uses' Forwards messages.
					this.SharedWeights_uses_F[ClassRange][FeatureRange] = new DistributionStructArray<Gaussian,double>(2);
					for(int _ind = 0; _ind<2; _ind++) {
						this.SharedWeights_uses_F[ClassRange][FeatureRange][_ind] = Gaussian.Uniform();
					}
				}
				// Create array for replicates of 'Weights_uses_F_ClassRange__FeatureRange__marginal'
				this.Weights_uses_F_ClassRange__FeatureRange__marginal[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'Weights_uses' from Replicate factor
					this.Weights_uses_F_ClassRange__FeatureRange__marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.SharedWeights_uses_F[ClassRange][FeatureRange][0]);
				}
				// Create array for replicates of 'Weights_uses_B_ClassRange__FeatureRange__toDef'
				this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'Weights_uses' from Replicate factor
					this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.SharedWeights_uses_F[ClassRange][FeatureRange][0]);
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'TransposedWeights' Forwards messages.
				this.TransposedWeights_F[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.TransposedWeights_F[FeatureRange][ClassRange] = Gaussian.Uniform();
				}
				// Create array for 'TransposedWeights' Backwards messages.
				this.TransposedWeights_B[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.TransposedWeights_B[FeatureRange][ClassRange] = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				// Create array for 'SharedWeights_uses' Backwards messages.
				this.SharedWeights_uses_B[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Create array for 'SharedWeights_uses' Backwards messages.
					this.SharedWeights_uses_B[ClassRange][FeatureRange] = new DistributionStructArray<Gaussian,double>(2);
					for(int _ind = 0; _ind<2; _ind++) {
						this.SharedWeights_uses_B[ClassRange][FeatureRange][_ind] = Gaussian.Uniform();
					}
				}
				// Create array for 'Weights_uses' Forwards messages.
				this.Weights_uses_F[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Create array for 'Weights_uses' Forwards messages.
					this.Weights_uses_F[ClassRange][FeatureRange] = new DistributionStructArray<Gaussian,double>(2);
					for(int _ind = 0; _ind<2; _ind++) {
						this.Weights_uses_F[ClassRange][FeatureRange][_ind] = Gaussian.Uniform();
					}
				}
				// Create array for 'Weights_depth1' Forwards messages.
				this.Weights_depth1_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_depth1_F[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
				// Create array for 'Weights_depth1' Backwards messages.
				this.Weights_depth1_B[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				// Create array for 'SharedWeights_use' Backwards messages.
				this.SharedWeights_use_B[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'WeightPrecisions_rep' Backwards messages.
				this.WeightPrecisions_rep_B[FeatureRange] = new DistributionStructArray<Gamma,double>(this.classCount);
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				// Create array for 'Weights_marginal' Forwards messages.
				this.Weights_marginal_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_marginal_F[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			this.Changed_ClassCount_FeatureCount_iterationsDone = 1;
			this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_iterationsDone = 0;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone = 0;
			this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and must reset on changes to numberOfIterationsDecreased and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14(bool initialise)
		{
			if ((this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_iterationsDone==1)&&((!initialise)||this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised)) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					for(int _ind = 0; _ind<2; _ind++) {
						this.Weights_uses_B[ClassRange][FeatureRange][_ind] = Gaussian.Uniform();
					}
				}
				// Message to 'Weights_FeatureIndexes' from JaggedSubarray factor
				this.Weights_depth1_F_ClassRange__marginal[ClassRange] = JaggedSubarrayOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.Weights_depth1_F[ClassRange]);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_depth1_B[ClassRange][FeatureRange] = Gaussian.Uniform();
					this.SharedWeights_use_B[ClassRange][FeatureRange] = Gaussian.Uniform();
					this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = Gamma.Uniform();
				}
			}
			this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_iterationsDone = 1;
			this.Changed_ClassCount_FeatureCount_Init_numberOfIterationsDecreased_FeatureIndexes_InstanceCount_Instan14_isInitialised = true;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone = 0;
			this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and WeightConstraints and must reset on changes to numberOfIterationsDecreased and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15(bool initialise)
		{
			if ((this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone==1)&&((!initialise)||this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised)) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'Weights_uses' from Copy factor
					this.Weights_uses_B[ClassRange][FeatureRange][0] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange][0], this.weightConstraints[ClassRange][FeatureRange]);
					// Message to 'Weights_uses' from Replicate factor
					this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange]);
					// Message to 'SharedWeights_uses' from Copy factor
					this.SharedWeights_uses_B[ClassRange][FeatureRange][0] = ArrayHelper.SetTo<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange][0], this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange]);
				}
			}
			this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_iterationsDone = 1;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_FeatureIndexes_In15_isInitialised = true;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and ZeroFeatureValueInstanceCounts</summary>
		private void Changed_FeatureCount_ZeroFeatureValueInstanceCounts()
		{
			if (this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone==1) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Enter factor
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = PowerPlateOp.ValueAverageConditional<Gamma>(this._hoist2, this.zeroFeatureValueInstanceCounts[FeatureRange], this.WeightPrecisionRates_uses_B[FeatureRange][1]);
			}
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureIndexes and FeatureCount and InstanceCount and InstanceFeatureCounts and FeatureValues</summary>
		private void Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues()
		{
			if (this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone==1) {
				return ;
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from JaggedSubarray factor
			this.WeightPrecisionRates_depth0_uses_B[1] = JaggedSubarrayOp<double>.ArrayAverageConditional<Gamma,DistributionStructArray<Gamma,double>,DistributionStructArray<Gamma,double>>(this.IndexedWeightPrecisionRates_B, this.featureIndexes, this.WeightPrecisionRates_depth0_uses_B[1]);
			this.Changed_FeatureIndexes_FeatureCount_InstanceCount_InstanceFeatureCounts_FeatureValues_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount</summary>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount()
		{
			if (this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone==1) {
				return ;
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from EqualRandom factor
			this.WeightPrecisionRates_depth0_uses_B[0] = ArrayHelper.SetTo<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B[0], this.weightPrecisionRateConstraints);
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues</summary>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11()
		{
			if (this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone==1) {
				return ;
			}
			// Message to 'WeightPrecisionRates_depth0_uses' from Replicate factor
			this.WeightPrecisionRates_depth0_uses_B_toDef = ReplicateOp_Divide.ToDef<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B, this.WeightPrecisionRates_depth0_uses_B_toDef);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Copy factor
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][0], this.WeightPrecisionRates_depth0_uses_B_toDef[FeatureRange]);
			}
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun11_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and ZeroFeatureValueInstanceCounts</summary>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13()
		{
			if (this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone==1) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange]);
				// Message to 'SharedWeightPrecisionRates_uses' from Copy factor
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange]);
			}
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun13_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginalDividedByPrior()
		{
			return this.WeightPrecisionRates_uses_B_FeatureRange__toDef;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and must reset on changes to numberOfIterationsDecreased and ClassCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7(bool initialise)
		{
			if ((this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				// Message to 'WeightPrecisions_rep' from Replicate factor
				this.WeightPrecisions_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.WeightPrecisions_F[FeatureRange]);
				this.CommonWeightPrecision_rep_B[FeatureRange] = Gamma.Uniform();
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
				// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist);
				// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
				this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
			}
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_iterationsDone = 1;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_ClassCount_FeatureIndexes_InstanceCount_Instan7_isInitialised = true;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 0;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of WeightPrecisionRateConstraints and FeatureCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and ZeroFeatureValueInstanceCounts and must reset on changes to numberOfIterationsDecreased and ClassCount and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21(bool initialise)
		{
			if ((this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone==1)&&((!initialise)||this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'SharedWeightPrecisionRates_uses' from Replicate factor
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				// Message to 'WeightPrecisions' from Ratio factor
				this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				// Message to 'WeightPrecisions_rep' from Replicate factor
				this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gamma>(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_rep_F_marginal[FeatureRange]);
			}
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_iterationsDone = 1;
			this.Changed_WeightPrecisionRateConstraints_FeatureCount_FeatureIndexes_InstanceCount_InstanceFeatureCoun21_isInitialised = true;
			this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and ClassCount and WeightPrecisionRateConstraints and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and ZeroFeatureValueInstanceCounts and must reset on changes to numberOfIterationsDecreased and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22(bool initialise)
		{
			if ((this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					// Message to 'WeightPrecisions_rep' from Replicate factor
					this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.WeightPrecisions_rep_B[FeatureRange][ClassRange], this.WeightPrecisions_rep_F_marginal[FeatureRange], ClassRange, this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
					// Message to 'SharedWeights' from Gaussian factor
					this.SharedWeights_F[ClassRange][FeatureRange] = GaussianOp.SampleAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], 0.0, this.WeightPrecisions_rep_F[FeatureRange][ClassRange], this.WeightPrecisions_rep_B[FeatureRange][ClassRange]);
				}
			}
			this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_iterationsDone = 1;
			this.Changed_FeatureCount_ClassCount_WeightPrecisionRateConstraints_FeatureIndexes_InstanceCount_Instance22_isInitialised = true;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and WeightConstraints and WeightPrecisionRateConstraints and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and ZeroFeatureValueInstanceCounts and must reset on changes to numberOfIterationsDecreased and Labels</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23(bool initialise)
		{
			if ((this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone==1)&&((!initialise)||this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_isInitialised)) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'SharedWeights_uses' from Replicate factor
					this.SharedWeights_uses_F[ClassRange][FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange], this.SharedWeights_F[ClassRange][FeatureRange], 1, this.SharedWeights_uses_F[ClassRange][FeatureRange][1]);
					// Message to 'TransposedWeights' from Copy factor
					this.TransposedWeights_F[FeatureRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.TransposedWeights_F[FeatureRange][ClassRange], this.SharedWeights_uses_F[ClassRange][FeatureRange][1]);
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'TransposedWeights' from Sum factor
				this.TransposedWeights_B[FeatureRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(0.0, this.TransposedWeights_F[FeatureRange], this.TransposedWeights_B[FeatureRange]);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					// Message to 'SharedWeights_uses' from Copy factor
					this.SharedWeights_uses_B[ClassRange][FeatureRange][1] = ArrayHelper.SetTo<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange][1], this.TransposedWeights_B[FeatureRange][ClassRange]);
					// Message to 'SharedWeights_use' from Replicate factor
					this.SharedWeights_use_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange], this.SharedWeights_use_B[ClassRange][FeatureRange]);
					// Message to 'WeightPrecisions_rep' from Gaussian factor
					this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = GaussianOp.PrecisionAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
				}
				// Message to 'WeightPrecisions_rep' from Replicate factor
				this.WeightPrecisions_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisions_rep_B[FeatureRange], this.WeightPrecisions_rep_B_toDef[FeatureRange]);
			}
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_iterationsDone = 1;
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_FeatureIndexes_Inst23_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and FeatureCount and ClassCount and FeatureIndexes and InstanceCount and InstanceFeatureCounts and FeatureValues and Labels and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts and WeightConstraints</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone==numberOfIterations) {
				return ;
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
					this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist);
					// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
					this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
					// Message to 'SharedWeightPrecisionRates_uses' from Replicate factor
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'WeightPrecisions' from Ratio factor
					this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'WeightPrecisions_rep' from Replicate factor
					this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gamma>(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_rep_F_marginal[FeatureRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						// Message to 'WeightPrecisions_rep' from Replicate factor
						this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.WeightPrecisions_rep_B[FeatureRange][ClassRange], this.WeightPrecisions_rep_F_marginal[FeatureRange], ClassRange, this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
						// Message to 'SharedWeights' from Gaussian factor
						this.SharedWeights_F[ClassRange][FeatureRange] = GaussianOp.SampleAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], 0.0, this.WeightPrecisions_rep_F[FeatureRange][ClassRange], this.WeightPrecisions_rep_B[FeatureRange][ClassRange]);
						// Message to 'SharedWeights_uses' from Replicate factor
						this.SharedWeights_uses_F[ClassRange][FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange], this.SharedWeights_F[ClassRange][FeatureRange], 1, this.SharedWeights_uses_F[ClassRange][FeatureRange][1]);
						// Message to 'TransposedWeights' from Copy factor
						this.TransposedWeights_F[FeatureRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.TransposedWeights_F[FeatureRange][ClassRange], this.SharedWeights_uses_F[ClassRange][FeatureRange][1]);
					}
					// Message to 'TransposedWeights' from Sum factor
					this.TransposedWeights_B[FeatureRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(0.0, this.TransposedWeights_F[FeatureRange], this.TransposedWeights_B[FeatureRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						// Message to 'SharedWeights_uses' from Copy factor
						this.SharedWeights_uses_B[ClassRange][FeatureRange][1] = ArrayHelper.SetTo<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange][1], this.TransposedWeights_B[FeatureRange][ClassRange]);
						// Message to 'SharedWeights_uses' from Replicate factor
						this.SharedWeights_uses_F[ClassRange][FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange], this.SharedWeights_F[ClassRange][FeatureRange], 0, this.SharedWeights_uses_F[ClassRange][FeatureRange][0]);
						// Message to 'Weights_uses' from Replicate factor
						this.Weights_uses_F_ClassRange__FeatureRange__marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange], this.SharedWeights_uses_F[ClassRange][FeatureRange][0], this.Weights_uses_F_ClassRange__FeatureRange__marginal[ClassRange][FeatureRange]);
						// Message to 'Weights_uses' from Replicate factor
						this.Weights_uses_F[ClassRange][FeatureRange][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_depth1_B[ClassRange][FeatureRange], this.Weights_uses_F_ClassRange__FeatureRange__marginal[ClassRange][FeatureRange], 1, this.Weights_uses_F[ClassRange][FeatureRange][1]);
						// Message to 'Weights_depth1' from Copy factor
						this.Weights_depth1_F[ClassRange][FeatureRange] = ArrayHelper.SetTo<Gaussian>(this.Weights_depth1_F[ClassRange][FeatureRange], this.Weights_uses_F[ClassRange][FeatureRange][1]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					// Message to 'Weights_FeatureIndexes' from JaggedSubarray factor
					this.Weights_depth1_F_ClassRange__marginal[ClassRange] = JaggedSubarrayOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian,object,DistributionStructArray<Gaussian,double>>(this.Weights_depth1_F[ClassRange], this.Weights_FeatureIndexes_B[ClassRange], this.featureIndexes, this.Weights_depth1_F_ClassRange__marginal[ClassRange]);
				}
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						// Message to 'Weights_FeatureIndexes' from JaggedSubarray factor
						this.Weights_FeatureIndexes_F[ClassRange][InstanceRange] = JaggedSubarrayOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.IndexedWeights_B[InstanceRange][ClassRange], this.Weights_depth1_F[ClassRange], this.Weights_depth1_F_ClassRange__marginal[ClassRange], this.featureIndexes, InstanceRange, this.Weights_FeatureIndexes_F[ClassRange][InstanceRange]);
						for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
							// Message to 'FeatureScores' from Product factor
							this.FeatureScores_F[InstanceRange][ClassRange][InstanceFeatureRanges] = GaussianProductOp.ProductAverageConditional(this.featureValues[InstanceRange][InstanceFeatureRanges], this.Weights_FeatureIndexes_F[ClassRange][InstanceRange][InstanceFeatureRanges]);
						}
						// Message to 'Scores' from Sum factor
						this.Scores_F[InstanceRange][ClassRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange][ClassRange]);
						// Message to 'NoisyScores' from GaussianFromMeanAndVariance factor
						this.NoisyScores_F[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Scores_F[InstanceRange][ClassRange], 1.0);
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
								// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Replicate factor
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Replicate factor
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange][0], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal[InstanceRange][ClassMaxNoisyScore][ClassRange], 0, this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange][0]);
							}
						}
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							// Message to 'MaxNoisyScore_rep' from Replicate factor
							this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.Marginal<Gaussian>(this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore][0], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore]);
							for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
								// Message to 'MaxNoisyScore_rep' from Replicate factor
								this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore], ClassRange, this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Replicate factor
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange][1], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F_ClassRange__marginal[InstanceRange][ClassMaxNoisyScore][ClassRange], 1, this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange][1]);
								if (ClassMaxNoisyScore!=ClassRange) {
									// Message to 'NoisyScoreDeltas' from Difference factor
									this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.AAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange][1]);
									// Message to 'NoisyScoreDeltas' from IsPositive factor
									this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0_' from Difference factor
									this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.BAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Copy factor
									this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange][1] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange][1], this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									// Message to 'MaxNoisyScore_0_' from Difference factor
									this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.SumAverageConditional(this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_F[InstanceRange][ClassMaxNoisyScore][ClassRange][1]);
									// Message to 'MaxNoisyScore_rep' from Copy factor
									this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								}
							}
							// Message to 'MaxNoisyScore_rep' from Replicate factor
							this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDef<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
							// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Copy factor
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore][0] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore][0], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
						}
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
								// Message to 'NoisyScores_ClassRange_ClassMaxNoisyScore_uses' from Replicate factor
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								// Message to 'NoisyScores_use' from Copy factor
								this.NoisyScores_use_B[InstanceRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_use_B[InstanceRange][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_uses_B_ClassRange__toDef[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							}
						}
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						// Message to 'Scores' from GaussianFromMeanAndVariance factor
						this.Scores_B[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScores_use_B[InstanceRange][ClassRange], 1.0);
						// Message to 'FeatureScores' from Sum factor
						this.FeatureScores_B[InstanceRange][ClassRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Scores_B[InstanceRange][ClassRange], this.Scores_F[InstanceRange][ClassRange], this.FeatureScores_F[InstanceRange][ClassRange], this.FeatureScores_B[InstanceRange][ClassRange]);
						for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
							// Message to 'IndexedWeights' from Product factor
							this.IndexedWeights_B[InstanceRange][ClassRange][InstanceFeatureRanges] = GaussianProductOp.BAverageConditional(this.FeatureScores_B[InstanceRange][ClassRange][InstanceFeatureRanges], this.featureValues[InstanceRange][InstanceFeatureRanges]);
						}
						this.Weights_depth1_F_ClassRange__marginal[ClassRange] = JaggedSubarrayOp<double>.MarginalIncrement<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.Weights_depth1_F_ClassRange__marginal[ClassRange], this.Weights_FeatureIndexes_F[ClassRange][InstanceRange], this.IndexedWeights_B[InstanceRange][ClassRange], this.featureIndexes, InstanceRange);
						// Message to 'Weights_FeatureIndexes' from Copy factor
						this.Weights_FeatureIndexes_B[ClassRange][InstanceRange] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.Weights_FeatureIndexes_B[ClassRange][InstanceRange], this.IndexedWeights_B[InstanceRange][ClassRange]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					// Message to 'Weights_depth1' from JaggedSubarray factor
					this.Weights_depth1_B[ClassRange] = JaggedSubarrayOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>,DistributionStructArray<Gaussian,double>>(this.Weights_FeatureIndexes_B[ClassRange], this.featureIndexes, this.Weights_depth1_B[ClassRange]);
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						// Message to 'Weights_uses' from Copy factor
						this.Weights_uses_B[ClassRange][FeatureRange][1] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange][1], this.Weights_depth1_B[ClassRange][FeatureRange]);
						// Message to 'Weights_uses' from Replicate factor
						this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange]);
						// Message to 'SharedWeights_uses' from Copy factor
						this.SharedWeights_uses_B[ClassRange][FeatureRange][0] = ArrayHelper.SetTo<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange][0], this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange]);
						// Message to 'SharedWeights_use' from Replicate factor
						this.SharedWeights_use_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.SharedWeights_uses_B[ClassRange][FeatureRange], this.SharedWeights_use_B[ClassRange][FeatureRange]);
						// Message to 'WeightPrecisions_rep' from Gaussian factor
						this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = GaussianOp.PrecisionAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
					}
				}
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'WeightPrecisions_rep' from Replicate factor
					this.WeightPrecisions_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisions_rep_B[FeatureRange], this.WeightPrecisions_rep_B_toDef[FeatureRange]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.CommonWeightPrecision_rep_B[FeatureRange] = GammaRatioOp_Laplace.AAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
				}
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_rep_B_toDef);
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'CommonWeightPrecision_rep' from Replicate factor
					this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'SharedWeightPrecisionRates_uses' from Ratio factor
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = GammaRatioOp_Laplace.BAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
					// Message to 'SharedWeightPrecisionRates_use' from Replicate factor
					this.SharedWeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_use_B[FeatureRange]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'Weights_marginal' from DerivedVariable factor
					this.Weights_marginal_F[ClassRange][FeatureRange] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.Weights_uses_B_ClassRange__FeatureRange__toDef[ClassRange][FeatureRange], this.SharedWeights_uses_F[ClassRange][FeatureRange][0], this.Weights_marginal_F[ClassRange][FeatureRange]);
				}
			}
			this.Changed_numberOfIterationsDecreased_FeatureCount_ClassCount_FeatureIndexes_InstanceCount_InstanceFea24_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightsMarginalDividedByPrior()
		{
			return this.Weights_uses_B_ClassRange__FeatureRange__toDef;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
