// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Factors;
using MicrosoftResearch.Infer.Collections;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 10:06 on 06 October 2015.
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vdouble0 property</summary>
		private double Vdouble0;
		/// <summary>Field backing the vdouble1 property</summary>
		private double Vdouble1;
		/// <summary>Field backing the vdouble2 property</summary>
		private double Vdouble2;
		/// <summary>Field backing the nUsers property</summary>
		private int NUsers;
		/// <summary>Field backing the vbool__1 property</summary>
		private bool[] Vbool__1;
		/// <summary>Field backing the vbool__5 property</summary>
		private bool[] Vbool__5;
		/// <summary>The number of iterations last computed by Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5. Set this to zero to force re-execution of Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5</summary>
		public int Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1</summary>
		public int Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_nUsers. Set this to zero to force re-execution of Changed_nUsers</summary>
		public int Changed_nUsers_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1. Set this to zero to force re-execution of Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1</summary>
		public int Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone;
		/// <summary>True if Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1 has performed initialisation. Set this to false to force re-execution of Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1</summary>
		public bool Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised;
		public DistributionStructArray<Beta,double> vdouble3_rep_F;
		/// <summary>The constant 'vBernoulli0'</summary>
		public Bernoulli vBernoulli0;
		/// <summary>Messages from use of 'vbool__0'</summary>
		public DistributionStructArray<Bernoulli,bool>[] vbool__0_uses_B;
		public DistributionStructArray<Beta,double> vdouble5_rep_F;
		public DistributionStructArray<Beta,double> vdouble4_rep_F;
		public Bernoulli _hoist2;
		public DistributionStructArray<Bernoulli,bool> vbool22_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> vbool__0_uses_B_index0__toDef;
		/// <summary>Message to marginal of 'vbool__6'</summary>
		public DistributionStructArray<Bernoulli,bool> vbool__6_marginal_F;
		/// <summary>Message to marginal of 'vdouble3'</summary>
		public Beta vdouble3_marginal_F;
		/// <summary>Message to marginal of 'vdouble4'</summary>
		public Beta vdouble4_marginal_F;
		/// <summary>Message to marginal of 'vdouble5'</summary>
		public Beta vdouble5_marginal_F;
		/// <summary>Message to marginal of 'vbool__0'</summary>
		public DistributionStructArray<Bernoulli,bool> vbool__0_marginal_F;
		/// <summary>Message to marginal of 'vbool__2'</summary>
		public DistributionStructArray<Bernoulli,bool> vbool__2_marginal_F;
		/// <summary>Message to marginal of 'vbool__4'</summary>
		public DistributionStructArray<Bernoulli,bool> vbool__4_marginal_F;
		public Gaussian vdouble0_marginal;
		public Gaussian vdouble1_marginal;
		public Gaussian vdouble2_marginal;
		public PointMass<int> nUsers_marginal;
		public DistributionStructArray<Bernoulli,bool> vbool__1_marginal;
		public DistributionStructArray<Bernoulli,bool> vbool__5_marginal;
		/// <summary>Message to marginal of 'vdouble6'</summary>
		public Beta vdouble6_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vdouble0'</summary>
		public double vdouble0
		{
			get {
				return this.Vdouble0;
			}
			set {
				if (this.Vdouble0!=value) {
					this.Vdouble0 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
					this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'vdouble1'</summary>
		public double vdouble1
		{
			get {
				return this.Vdouble1;
			}
			set {
				if (this.Vdouble1!=value) {
					this.Vdouble1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
					this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'vdouble2'</summary>
		public double vdouble2
		{
			get {
				return this.Vdouble2;
			}
			set {
				if (this.Vdouble2!=value) {
					this.Vdouble2 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
					this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'nUsers'</summary>
		public int nUsers
		{
			get {
				return this.NUsers;
			}
			set {
				if (this.NUsers!=value) {
					this.NUsers = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nUsers_iterationsDone = 0;
					this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
					this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'vbool__1'</summary>
		public bool[] vbool__1
		{
			get {
				return this.Vbool__1;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NUsers)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NUsers)+" was expected for variable \'vbool__1\'");
				}
				this.Vbool__1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
				this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vbool__5'</summary>
		public bool[] vbool__5
		{
			get {
				return this.Vbool__5;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NUsers)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NUsers)+" was expected for variable \'vbool__5\'");
				}
				this.Vbool__5 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
				this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vdouble0") {
				return this.vdouble0;
			}
			if (variableName=="vdouble1") {
				return this.vdouble1;
			}
			if (variableName=="vdouble2") {
				return this.vdouble2;
			}
			if (variableName=="nUsers") {
				return this.nUsers;
			}
			if (variableName=="vbool__1") {
				return this.vbool__1;
			}
			if (variableName=="vbool__5") {
				return this.vbool__5;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vdouble0") {
				this.vdouble0 = (double)value;
				return ;
			}
			if (variableName=="vdouble1") {
				this.vdouble1 = (double)value;
				return ;
			}
			if (variableName=="vdouble2") {
				this.vdouble2 = (double)value;
				return ;
			}
			if (variableName=="nUsers") {
				this.nUsers = (int)value;
				return ;
			}
			if (variableName=="vbool__1") {
				this.vbool__1 = (bool[])value;
				return ;
			}
			if (variableName=="vbool__5") {
				this.vbool__5 = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool__6") {
				return this.Vbool__6Marginal();
			}
			if (variableName=="vdouble3") {
				return this.Vdouble3Marginal();
			}
			if (variableName=="vdouble4") {
				return this.Vdouble4Marginal();
			}
			if (variableName=="vdouble5") {
				return this.Vdouble5Marginal();
			}
			if (variableName=="vbool__0") {
				return this.Vbool__0Marginal();
			}
			if (variableName=="vbool__2") {
				return this.Vbool__2Marginal();
			}
			if (variableName=="vbool__4") {
				return this.Vbool__4Marginal();
			}
			if (variableName=="vdouble0") {
				return this.Vdouble0Marginal();
			}
			if (variableName=="vdouble1") {
				return this.Vdouble1Marginal();
			}
			if (variableName=="vdouble2") {
				return this.Vdouble2Marginal();
			}
			if (variableName=="nUsers") {
				return this.NUsersMarginal();
			}
			if (variableName=="vbool__1") {
				return this.Vbool__1Marginal();
			}
			if (variableName=="vbool__5") {
				return this.Vbool__5Marginal();
			}
			if (variableName=="vdouble6") {
				return this.Vdouble6Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone) {
				this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
			}
			this.Constant();
			this.Changed_nUsers();
			this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1(initialise);
			this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1(numberOfIterations);
			this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			this.vBernoulli0 = Bernoulli.FromLogOdds(double.PositiveInfinity);
			this._hoist2 = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vBernoulli0);
			this.Constant_iterationsDone = 1;
			this.Changed_nUsers_iterationsDone = 0;
			this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of nUsers</summary>
		private void Changed_nUsers()
		{
			if (this.Changed_nUsers_iterationsDone==1) {
				return ;
			}
			// Create array for 'vdouble3_rep' Forwards messages.
			this.vdouble3_rep_F = new DistributionStructArray<Beta,double>(this.NUsers);
			// Create array for 'vbool__0_uses' Backwards messages.
			this.vbool__0_uses_B = new DistributionStructArray<Bernoulli,bool>[this.NUsers];
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Create array for 'vbool__0_uses' Backwards messages.
				this.vbool__0_uses_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for 'vdouble5_rep' Forwards messages.
			this.vdouble5_rep_F = new DistributionStructArray<Beta,double>(this.NUsers);
			// Create array for 'vdouble4_rep' Forwards messages.
			this.vdouble4_rep_F = new DistributionStructArray<Beta,double>(this.NUsers);
			// Create array for replicates of 'vbool22_F'
			this.vbool22_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			// Create array for replicates of 'vbool__0_uses_B_index0__toDef'
			this.vbool__0_uses_B_index0__toDef = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			this.Changed_nUsers_iterationsDone = 1;
			this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of nUsers and must reset on changes to numberOfIterationsDecreased and vbool__1 and vbool__5 and vdouble0 and vdouble2 and vdouble1</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1(bool initialise)
		{
			if ((this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone==1)&&((!initialise)||this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NUsers; index0++) {
				this.vdouble3_rep_F[index0] = Beta.Uniform();
				for(int _ind = 0; _ind<2; _ind++) {
					this.vbool__0_uses_B[index0][_ind] = Bernoulli.Uniform();
				}
				this.vdouble5_rep_F[index0] = Beta.Uniform();
				this.vdouble4_rep_F[index0] = Beta.Uniform();
				this.vbool22_F[index0] = Bernoulli.Uniform();
				this.vbool__0_uses_B_index0__toDef[index0] = ArrayHelper.CopyStorage<Bernoulli>(this._hoist2);
			}
			this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 1;
			this.Changed_nUsers_Init_numberOfIterationsDecreased_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and nUsers and vbool__1 and vbool__5 and vdouble0 and vdouble2 and vdouble1</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone==numberOfIterations) {
				return ;
			}
			// The constant 'vBeta0'
			Beta vBeta0 = Beta.Uniform();
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta>
			Beta vdouble3_rep_F_marginal = default(Beta);
			// Message to 'vdouble3_rep' from Replicate factor
			vdouble3_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(vBeta0);
			// Create array for replicates of 'vbool6_F'
			DistributionStructArray<Bernoulli,bool> vbool6_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool6_F[index0] = Bernoulli.Uniform();
			}
			Bernoulli _hoist5 = default(Bernoulli);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				_hoist5 = Bernoulli.Uniform();
				index0 = this.NUsers-1;
			}
			for(int index0 = 0; index0<this.NUsers; index0++) {
				_hoist5 = BernoulliFromBetaOp.SampleAverageConditional(this.Vdouble0);
				index0 = this.NUsers-1;
			}
			// The constant 'vbool19'
			// Create array for replicates of 'vbool19'
			bool[] vbool19 = new bool[this.NUsers];
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool19[index0] = Factor.Not(this.Vbool__1[index0]);
			}
			// Create array for replicates of 'vbool20_F'
			DistributionStructArray<Bernoulli,bool> vbool20_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool20_F[index0] = Bernoulli.Uniform();
				// Message to 'vbool20' from And factor
				vbool20_F[index0] = BooleanAndOp.AndAverageConditional(vbool19[index0], _hoist5);
			}
			// Create array for replicates of 'vbool__2_index0__selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][] vbool__2_index0__selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[this.NUsers][];
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Create array for 'vbool__2_index0__selector_cases_uses' Backwards messages.
				vbool__2_index0__selector_cases_uses_B[index0] = new DistributionStructArray<Bernoulli,bool>[2];
				for(int _ind = 0; _ind<2; _ind++) {
					// Create array for 'vbool__2_index0__selector_cases_uses' Backwards messages.
					vbool__2_index0__selector_cases_uses_B[index0][_ind] = new DistributionStructArray<Bernoulli,bool>(2);
					for(int _iv = 0; _iv<2; _iv++) {
						vbool__2_index0__selector_cases_uses_B[index0][_ind][_iv] = Bernoulli.Uniform();
					}
				}
			}
			Bernoulli _hoist3 = default(Bernoulli);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				_hoist3 = Bernoulli.Uniform();
				index0 = this.NUsers-1;
			}
			for(int index0 = 0; index0<this.NUsers; index0++) {
				_hoist3 = BernoulliFromBetaOp.SampleAverageConditional(this.Vdouble2);
				index0 = this.NUsers-1;
			}
			// Create array for replicates of 'vbool15__F'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool15__F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Create array for 'vbool15_' Forwards messages.
				vbool15__F[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _gateind = 0; _gateind<2; _gateind++) {
					vbool15__F[index0][_gateind] = Bernoulli.Uniform();
				}
				// Message to 'vbool15_' from Copy factor
				vbool15__F[index0][0] = ArrayHelper.SetTo<Bernoulli>(vbool15__F[index0][0], _hoist3);
			}
			Bernoulli _hoist4 = default(Bernoulli);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				_hoist4 = Bernoulli.Uniform();
				index0 = this.NUsers-1;
			}
			for(int index0 = 0; index0<this.NUsers; index0++) {
				_hoist4 = BernoulliFromBetaOp.SampleAverageConditional(this.Vdouble1);
				index0 = this.NUsers-1;
			}
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Message to 'vbool15_' from Copy factor
				vbool15__F[index0][1] = ArrayHelper.SetTo<Bernoulli>(vbool15__F[index0][1], _hoist4);
			}
			// Messages to use of 'vbool__0'
			DistributionStructArray<Bernoulli,bool>[] vbool__0_uses_F = default(DistributionStructArray<Bernoulli,bool>[]);
			// Create array for 'vbool__0_uses' Forwards messages.
			vbool__0_uses_F = new DistributionStructArray<Bernoulli,bool>[this.NUsers];
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Create array for 'vbool__0_uses' Forwards messages.
				vbool__0_uses_F[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					vbool__0_uses_F[index0][_ind] = Bernoulli.Uniform();
				}
			}
			DistributionStructArray<Bernoulli,bool> vbool__4_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vbool__4' Forwards messages.
			vbool__4_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool__4_F[index0] = Bernoulli.Uniform();
			}
			// Message from use of 'vbool25'
			// Create array for replicates of 'vbool25_use_B'
			DistributionStructArray<Bernoulli,bool> vbool25_use_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool25_use_B[index0] = Bernoulli.Uniform();
			}
			DistributionStructArray<Beta,double> vdouble5_rep_B = default(DistributionStructArray<Beta,double>);
			// Create array for 'vdouble5_rep' Backwards messages.
			vdouble5_rep_B = new DistributionStructArray<Beta,double>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vdouble5_rep_B[index0] = Beta.Uniform();
			}
			// Buffer for ReplicateOp_Divide.Marginal<Beta>
			Beta vdouble5_rep_B_toDef = default(Beta);
			// Message to 'vdouble5_rep' from Replicate factor
			vdouble5_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(vBeta0);
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta>
			Beta vdouble5_rep_F_marginal = default(Beta);
			// Message to 'vdouble5_rep' from Replicate factor
			vdouble5_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(vBeta0);
			// Create array for replicates of 'vbool25_F'
			DistributionStructArray<Bernoulli,bool> vbool25_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool25_F[index0] = Bernoulli.Uniform();
			}
			// Message from use of 'vbool__4'
			DistributionStructArray<Bernoulli,bool> vbool__4_use_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vbool__4_use' Backwards messages.
			vbool__4_use_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool__4_use_B[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool22_B'
			DistributionStructArray<Bernoulli,bool> vbool22_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool22_B[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool21_B'
			DistributionStructArray<Bernoulli,bool> vbool21_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool21_B[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool15_B'
			DistributionStructArray<Bernoulli,bool> vbool15_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool15_B[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool__2_index0__selector_cases_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool__2_index0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Create array for 'vbool__2_index0__selector_cases' Backwards messages.
				vbool__2_index0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _iv = 0; _iv<2; _iv++) {
					vbool__2_index0__selector_cases_B[index0][_iv] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vbool__2_index0__selector_B'
			DistributionStructArray<Bernoulli,bool> vbool__2_index0__selector_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool__2_index0__selector_B[index0] = Bernoulli.Uniform();
			}
			// Message from use of 'vbool9'
			// Create array for replicates of 'vbool9_use_B'
			DistributionStructArray<Bernoulli,bool> vbool9_use_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool9_use_B[index0] = Bernoulli.Uniform();
			}
			DistributionStructArray<Beta,double> vdouble4_rep_B = default(DistributionStructArray<Beta,double>);
			// Create array for 'vdouble4_rep' Backwards messages.
			vdouble4_rep_B = new DistributionStructArray<Beta,double>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vdouble4_rep_B[index0] = Beta.Uniform();
			}
			// Buffer for ReplicateOp_Divide.Marginal<Beta>
			Beta vdouble4_rep_B_toDef = default(Beta);
			// Message to 'vdouble4_rep' from Replicate factor
			vdouble4_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(vBeta0);
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta>
			Beta vdouble4_rep_F_marginal = default(Beta);
			// Message to 'vdouble4_rep' from Replicate factor
			vdouble4_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(vBeta0);
			// Create array for replicates of 'vbool9_F'
			DistributionStructArray<Bernoulli,bool> vbool9_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool9_F[index0] = Bernoulli.Uniform();
			}
			DistributionStructArray<Bernoulli,bool> vbool__2_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vbool__2' Forwards messages.
			vbool__2_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool__2_F[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool__2_index0__selector_cases_F'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool__2_index0__selector_cases_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Create array for 'vbool__2_index0__selector_cases' Forwards messages.
				vbool__2_index0__selector_cases_F[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _iv = 0; _iv<2; _iv++) {
					vbool__2_index0__selector_cases_F[index0][_iv] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vbool__2_index0__selector_cases_uses_F'
			DistributionStructArray<Bernoulli,bool>[][] vbool__2_index0__selector_cases_uses_F = new DistributionStructArray<Bernoulli,bool>[this.NUsers][];
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Create array for 'vbool__2_index0__selector_cases_uses' Forwards messages.
				vbool__2_index0__selector_cases_uses_F[index0] = new DistributionStructArray<Bernoulli,bool>[2];
				for(int _ind = 0; _ind<2; _ind++) {
					// Create array for 'vbool__2_index0__selector_cases_uses' Forwards messages.
					vbool__2_index0__selector_cases_uses_F[index0][_ind] = new DistributionStructArray<Bernoulli,bool>(2);
					for(int _iv = 0; _iv<2; _iv++) {
						vbool__2_index0__selector_cases_uses_F[index0][_ind][_iv] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'vbool15_F'
			DistributionStructArray<Bernoulli,bool> vbool15_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool15_F[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool21_F'
			DistributionStructArray<Bernoulli,bool> vbool21_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool21_F[index0] = Bernoulli.Uniform();
			}
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli>
			// Create array for replicates of 'vbool__0_uses_F_index0__marginal'
			DistributionStructArray<Bernoulli,bool> vbool__0_uses_F_index0__marginal = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			Bernoulli _hoist = default(Bernoulli);
			_hoist = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vBernoulli0);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool__0_uses_F_index0__marginal[index0] = ArrayHelper.CopyStorage<Bernoulli>(_hoist);
			}
			// Message from use of 'vbool6'
			// Create array for replicates of 'vbool6_use_B'
			DistributionStructArray<Bernoulli,bool> vbool6_use_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool6_use_B[index0] = Bernoulli.Uniform();
			}
			DistributionStructArray<Beta,double> vdouble3_rep_B = default(DistributionStructArray<Beta,double>);
			// Create array for 'vdouble3_rep' Backwards messages.
			vdouble3_rep_B = new DistributionStructArray<Beta,double>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vdouble3_rep_B[index0] = Beta.Uniform();
			}
			// Buffer for ReplicateOp_Divide.Marginal<Beta>
			Beta vdouble3_rep_B_toDef = default(Beta);
			// Message to 'vdouble3_rep' from Replicate factor
			vdouble3_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(vBeta0);
			DistributionStructArray<Bernoulli,bool> vbool__6_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vbool__6' Forwards messages.
			vbool__6_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool__6_F[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool28_F'
			DistributionStructArray<Bernoulli,bool> vbool28_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool28_F[index0] = Bernoulli.Uniform();
			}
			DistributionStructArray<Beta,double> vdouble6_rep_F = default(DistributionStructArray<Beta,double>);
			DistributionStructArray<Beta,double> vdouble6_rep_B = default(DistributionStructArray<Beta,double>);
			// Create array for 'vdouble6_rep' Forwards messages.
			vdouble6_rep_F = new DistributionStructArray<Beta,double>(this.NUsers);
			// Create array for 'vdouble6_rep' Backwards messages.
			vdouble6_rep_B = new DistributionStructArray<Beta,double>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vdouble6_rep_B[index0] = Beta.Uniform();
				vdouble6_rep_F[index0] = Beta.Uniform();
			}
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta>
			Beta vdouble6_rep_F_marginal = default(Beta);
			// Message to 'vdouble6_rep' from Replicate factor
			vdouble6_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(vBeta0);
			// Buffer for ReplicateOp_Divide.Marginal<Beta>
			Beta vdouble6_rep_B_toDef = default(Beta);
			// Message to 'vdouble6_rep' from Replicate factor
			vdouble6_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(vBeta0);
			// Message to 'vdouble6_rep' from Replicate factor
			vdouble6_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(vdouble6_rep_B_toDef, vBeta0, vdouble6_rep_F_marginal);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				// Message to 'vdouble6_rep' from Replicate factor
				vdouble6_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(vdouble6_rep_B[index0], vdouble6_rep_F_marginal, index0, vdouble6_rep_F[index0]);
				// Message to 'vbool28' from Bernoulli factor
				vbool28_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(vdouble6_rep_F[index0]);
			}
			// Create array for 'vbool__6_marginal' Forwards messages.
			this.vbool__6_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				this.vbool__6_marginal_F[index0] = Bernoulli.Uniform();
			}
			// Message from use of 'vbool__6'
			DistributionStructArray<Bernoulli,bool> vbool__6_use_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vbool__6_use' Backwards messages.
			vbool__6_use_B = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				vbool__6_use_B[index0] = Bernoulli.Uniform();
				// Message to 'vbool__6' from And factor
				vbool__6_F[index0] = BooleanAndOp.AndAverageConditional(this.Vbool__5[index0], vbool28_F[index0]);
				// Message to 'vbool__6_marginal' from DerivedVariable factor
				this.vbool__6_marginal_F[index0] = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool__6_use_B[index0], vbool__6_F[index0], this.vbool__6_marginal_F[index0]);
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index0 = 0; index0<this.NUsers; index0++) {
					// Message to 'vbool__0_uses' from Replicate factor
					vbool__0_uses_F_index0__marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool__0_uses_B_index0__toDef[index0], this.vBernoulli0, vbool__0_uses_F_index0__marginal[index0]);
					// Message to 'vbool__0_uses' from Replicate factor
					vbool__0_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool__0_uses_B[index0][0], vbool__0_uses_F_index0__marginal[index0], 0, vbool__0_uses_F[index0][0]);
					// Message to 'vbool6_use' from And factor
					vbool6_use_B[index0] = BooleanAndOp.BAverageConditional(this.Vbool__1[index0], vbool__0_uses_F[index0][0]);
					// Message to 'vdouble3_rep' from Bernoulli factor
					vdouble3_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(vbool6_use_B[index0], this.vdouble3_rep_F[index0]);
				}
				// Message to 'vdouble3_rep' from Replicate factor
				vdouble3_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(vdouble3_rep_B, vdouble3_rep_B_toDef);
				for(int index0 = 0; index0<this.NUsers; index0++) {
					// Message to 'vbool__0_uses' from Replicate factor
					vbool__0_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool__0_uses_B[index0][1], vbool__0_uses_F_index0__marginal[index0], 1, vbool__0_uses_F[index0][1]);
					// Message to 'vbool__4' from And factor
					vbool__4_F[index0] = BooleanAndOp.AndAverageConditional(vbool__0_uses_F[index0][1], this.vbool22_F[index0]);
					// Message to 'vbool25_use' from And factor
					vbool25_use_B[index0] = BooleanAndOp.BAverageConditional(this.Vbool__5[index0], vbool__4_F[index0]);
					// Message to 'vdouble5_rep' from Bernoulli factor
					vdouble5_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(vbool25_use_B[index0], this.vdouble5_rep_F[index0]);
				}
				// Message to 'vdouble5_rep' from Replicate factor
				vdouble5_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(vdouble5_rep_B, vdouble5_rep_B_toDef);
				// Message to 'vdouble5_rep' from Replicate factor
				vdouble5_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(vdouble5_rep_B_toDef, vBeta0, vdouble5_rep_F_marginal);
				for(int index0 = 0; index0<this.NUsers; index0++) {
					// Message to 'vdouble5_rep' from Replicate factor
					this.vdouble5_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(vdouble5_rep_B[index0], vdouble5_rep_F_marginal, index0, this.vdouble5_rep_F[index0]);
					// Message to 'vbool25' from Bernoulli factor
					vbool25_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.vdouble5_rep_F[index0]);
					// Message to 'vbool__4_use' from And factor
					vbool__4_use_B[index0] = BooleanAndOp.AAverageConditional(this.Vbool__5[index0], vbool25_F[index0]);
					// Message to 'vbool22' from And factor
					vbool22_B[index0] = BooleanAndOp.BAverageConditional(vbool__4_use_B[index0], vbool__0_uses_F[index0][1]);
					// Message to 'vbool21' from Or factor
					vbool21_B[index0] = BooleanOrOp.BAverageConditional(vbool22_B[index0], vbool20_F[index0]);
					// Message to 'vbool15' from And factor
					vbool15_B[index0] = BooleanAndOp.BAverageConditional(vbool21_B[index0], this.Vbool__1[index0]);
					// Message to 'vbool__2_index0__selector_cases_uses' from Exit factor
					vbool__2_index0__selector_cases_uses_B[index0][1] = GateExitOp<bool>.CasesAverageConditional<Bernoulli,DistributionStructArray<Bernoulli,bool>>(vbool15_B[index0], vbool15__F[index0], vbool__2_index0__selector_cases_uses_B[index0][1]);
					// Message to 'vbool__2_index0__selector_cases' from Replicate factor
					vbool__2_index0__selector_cases_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Bernoulli,bool>>(vbool__2_index0__selector_cases_uses_B[index0], vbool__2_index0__selector_cases_B[index0]);
					// Message to 'vbool__2_index0__selector' from Cases factor
					vbool__2_index0__selector_B[index0] = CasesOp.BAverageConditional(vbool__2_index0__selector_cases_B[index0]);
					// Message to 'vbool9_use' from And factor
					vbool9_use_B[index0] = BooleanAndOp.BAverageConditional(vbool__2_index0__selector_B[index0], this.Vbool__1[index0]);
					// Message to 'vdouble4_rep' from Bernoulli factor
					vdouble4_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(vbool9_use_B[index0], this.vdouble4_rep_F[index0]);
				}
				// Message to 'vdouble4_rep' from Replicate factor
				vdouble4_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(vdouble4_rep_B, vdouble4_rep_B_toDef);
				// Message to 'vdouble4_rep' from Replicate factor
				vdouble4_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(vdouble4_rep_B_toDef, vBeta0, vdouble4_rep_F_marginal);
				for(int index0 = 0; index0<this.NUsers; index0++) {
					// Message to 'vdouble4_rep' from Replicate factor
					this.vdouble4_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(vdouble4_rep_B[index0], vdouble4_rep_F_marginal, index0, this.vdouble4_rep_F[index0]);
					// Message to 'vbool9' from Bernoulli factor
					vbool9_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.vdouble4_rep_F[index0]);
					// Message to 'vbool__2' from And factor
					vbool__2_F[index0] = BooleanAndOp.AndAverageConditional(this.Vbool__1[index0], vbool9_F[index0]);
					// Message to 'vbool__2_index0__selector_cases' from Cases factor
					vbool__2_index0__selector_cases_F[index0] = CasesOp.CasesAverageConditional<DistributionStructArray<Bernoulli,bool>>(vbool__2_F[index0], vbool__2_index0__selector_cases_F[index0]);
					// Message to 'vbool__2_index0__selector_cases_uses' from Replicate factor
					vbool__2_index0__selector_cases_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Bernoulli,bool>>(vbool__2_index0__selector_cases_uses_B[index0], vbool__2_index0__selector_cases_F[index0], 1, vbool__2_index0__selector_cases_uses_F[index0][1]);
					// Message to 'vbool15' from Exit factor
					vbool15_F[index0] = BeliefPropagationGateExitOp.ExitAverageConditional<Bernoulli>(vbool__2_index0__selector_cases_uses_F[index0][1], vbool15__F[index0], vbool15_F[index0]);
					// Message to 'vbool21' from And factor
					vbool21_F[index0] = BooleanAndOp.AndAverageConditional(this.Vbool__1[index0], vbool15_F[index0]);
					// Message to 'vbool22' from Or factor
					this.vbool22_F[index0] = BooleanOrOp.OrAverageConditional(vbool20_F[index0], vbool21_F[index0]);
					// Message to 'vbool__0_uses' from And factor
					this.vbool__0_uses_B[index0][1] = BooleanAndOp.AAverageConditional(vbool__4_use_B[index0], this.vbool22_F[index0]);
				}
				// Message to 'vdouble3_rep' from Replicate factor
				vdouble3_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(vdouble3_rep_B_toDef, vBeta0, vdouble3_rep_F_marginal);
				for(int index0 = 0; index0<this.NUsers; index0++) {
					// Message to 'vdouble3_rep' from Replicate factor
					this.vdouble3_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(vdouble3_rep_B[index0], vdouble3_rep_F_marginal, index0, this.vdouble3_rep_F[index0]);
					// Message to 'vbool6' from Bernoulli factor
					vbool6_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.vdouble3_rep_F[index0]);
					// Message to 'vbool__0_uses' from And factor
					this.vbool__0_uses_B[index0][0] = BooleanAndOp.AAverageConditional(this.Vbool__1[index0], vbool6_F[index0]);
					// Message to 'vbool__0_uses' from Replicate factor
					this.vbool__0_uses_B_index0__toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool__0_uses_B[index0], this.vbool__0_uses_B_index0__toDef[index0]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.vdouble3_marginal_F = Beta.Uniform();
			// Message to 'vdouble3_marginal' from Variable factor
			this.vdouble3_marginal_F = VariableOp.MarginalAverageConditional<Beta>(vdouble3_rep_B_toDef, vBeta0, this.vdouble3_marginal_F);
			this.vdouble4_marginal_F = Beta.Uniform();
			// Message to 'vdouble4_marginal' from Variable factor
			this.vdouble4_marginal_F = VariableOp.MarginalAverageConditional<Beta>(vdouble4_rep_B_toDef, vBeta0, this.vdouble4_marginal_F);
			this.vdouble5_marginal_F = Beta.Uniform();
			// Message to 'vdouble5_marginal' from Variable factor
			this.vdouble5_marginal_F = VariableOp.MarginalAverageConditional<Beta>(vdouble5_rep_B_toDef, vBeta0, this.vdouble5_marginal_F);
			// Create array for 'vbool__0_marginal' Forwards messages.
			this.vbool__0_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				this.vbool__0_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'vbool__0_marginal' from Variable factor
				this.vbool__0_marginal_F[index0] = VariableOp.MarginalAverageConditional<Bernoulli>(this.vbool__0_uses_B_index0__toDef[index0], this.vBernoulli0, this.vbool__0_marginal_F[index0]);
			}
			// Create array for 'vbool__2_marginal' Forwards messages.
			this.vbool__2_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				this.vbool__2_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'vbool__2_marginal' from DerivedVariable factor
				this.vbool__2_marginal_F[index0] = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool__2_index0__selector_B[index0], vbool__2_F[index0], this.vbool__2_marginal_F[index0]);
			}
			// Create array for 'vbool__4_marginal' Forwards messages.
			this.vbool__4_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NUsers);
			for(int index0 = 0; index0<this.NUsers; index0++) {
				this.vbool__4_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'vbool__4_marginal' from DerivedVariable factor
				this.vbool__4_marginal_F[index0] = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool__4_use_B[index0], vbool__4_F[index0], this.vbool__4_marginal_F[index0]);
			}
			this.Changed_numberOfIterationsDecreased_nUsers_vbool__1_vbool__5_vdouble0_vdouble2_vdouble1_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__6Marginal()
		{
			return this.vbool__6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble3Marginal()
		{
			return this.vdouble3_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble4Marginal()
		{
			return this.vdouble4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble5Marginal()
		{
			return this.vdouble5_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__0Marginal()
		{
			return this.vbool__0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__2Marginal()
		{
			return this.vbool__2_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__4Marginal()
		{
			return this.vbool__4_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of vdouble0 and vdouble1 and vdouble2 and nUsers and vbool__1 and vbool__5</summary>
		private void Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5()
		{
			if (this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone==1) {
				return ;
			}
			this.vdouble0_marginal = Gaussian.Uniform();
			this.vdouble0_marginal = Distribution.SetPoint<Gaussian,double>(this.vdouble0_marginal, this.Vdouble0);
			this.vdouble1_marginal = Gaussian.Uniform();
			this.vdouble1_marginal = Distribution.SetPoint<Gaussian,double>(this.vdouble1_marginal, this.Vdouble1);
			this.vdouble2_marginal = Gaussian.Uniform();
			this.vdouble2_marginal = Distribution.SetPoint<Gaussian,double>(this.vdouble2_marginal, this.Vdouble2);
			this.nUsers_marginal = new PointMass<int>(this.NUsers);
			this.vbool__1_marginal = new DistributionStructArray<Bernoulli,bool>(this.NUsers, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.vbool__1_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.vbool__1_marginal, this.Vbool__1);
			this.vbool__5_marginal = new DistributionStructArray<Bernoulli,bool>(this.NUsers, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.vbool__5_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.vbool__5_marginal, this.Vbool__5);
			this.vdouble6_marginal_F = Beta.Uniform();
			this.Changed_vdouble0_vdouble1_vdouble2_nUsers_vbool__1_vbool__5_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble0Marginal()
		{
			return this.vdouble0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble1Marginal()
		{
			return this.vdouble1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble2Marginal()
		{
			return this.vdouble2_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'nUsers' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> NUsersMarginal()
		{
			return this.nUsers_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__1Marginal()
		{
			return this.vbool__1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__5Marginal()
		{
			return this.vbool__5_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble6Marginal()
		{
			return this.vdouble6_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
