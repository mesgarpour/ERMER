// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Factors;
using MicrosoftResearch.Infer.Collections;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 11:57 PM on Friday, November 14, 2014.
	/// </remarks>
	public partial class CompoundDenseBinaryBpmTraining_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionStructArray<Gaussian,double> weightConstraints;
		/// <summary>Field backing the WeightPrecisionRateConstraints property</summary>
		private DistributionStructArray<Gamma,double> weightPrecisionRateConstraints;
		/// <summary>Field backing the Labels property</summary>
		private bool[] labels;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount. Set this to zero to force re-execution of Changed_FeatureCount</summary>
		public int Changed_FeatureCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2. Set this to zero to force re-execution of Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2</summary>
		public int Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_iterationsDone;
		/// <summary>True if Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2</summary>
		public bool Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3</summary>
		public int Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3</summary>
		public bool Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_WeightPrecisionRateConstraints. Set this to zero to force re-execution of Changed_FeatureCount_WeightPrecisionRateConstraints</summary>
		public int Changed_FeatureCount_WeightPrecisionRateConstraints_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_InstanceCount. Set this to zero to force re-execution of Changed_FeatureCount_InstanceCount</summary>
		public int Changed_FeatureCount_InstanceCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_InstanceCount_FeatureCount_FeatureValues. Set this to zero to force re-execution of Changed_InstanceCount_FeatureCount_FeatureValues</summary>
		public int Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues. Set this to zero to force re-execution of Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues</summary>
		public int Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8. Set this to zero to force re-execution of Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8</summary>
		public int Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_iterationsDone;
		/// <summary>True if Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8</summary>
		public bool Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised;
		/// <summary>The number of iterations last computed by Changed_InstanceCount. Set this to zero to force re-execution of Changed_InstanceCount</summary>
		public int Changed_InstanceCount_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10. Set this to zero to force re-execution of Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10</summary>
		public int Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_iterationsDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10</summary>
		public bool Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11. Set this to zero to force re-execution of Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11</summary>
		public int Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone;
		/// <summary>True if Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11</summary>
		public bool Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_isInitialised;
		/// <summary>The number of iterations last computed by Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12. Set this to zero to force re-execution of Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12</summary>
		public int Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone;
		/// <summary>True if Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12</summary>
		public bool Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_isInitialised;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13</summary>
		public int Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> FeatureScores_F;
		public DistributionStructArray<Gaussian,double> Score_F;
		public DistributionStructArray<Gaussian,double> NoisyScore_F;
		/// <summary>Message from use of 'NoisyScore'</summary>
		public DistributionStructArray<Gaussian,double> NoisyScore_use_B;
		public DistributionStructArray<Gaussian,double> Score_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> FeatureScores_B;
		public DistributionStructArray<Gaussian,double> Weights_F;
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_F;
		public DistributionStructArray<Gamma,double> WeightPrecisions_F;
		public DistributionStructArray<Gamma,double> WeightPrecisions_B;
		public Gamma CommonWeightPrecision_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public Gamma CommonWeightPrecision_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public Gamma CommonWeightPrecision_rep_B_toDef;
		public Gamma _hoist;
		/// <summary>Message from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_use_B;
		/// <summary>Messages to use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] SharedWeightPrecisionRates_uses_F;
		/// <summary>Messages from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] SharedWeightPrecisionRates_uses_B;
		/// <summary>Messages from use of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_uses_B;
		/// <summary>Messages to use of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_uses_F;
		/// <summary>Messages from use of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double>[] Weights_uses_B;
		/// <summary>Messages to use of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double>[] Weights_uses_F;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_B;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_F;
		/// <summary>Message to marginal of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double> Weights_marginal_F;
		/// <summary>Buffer for GammaFromShapeAndRateOp_Laplace.SampleAverageConditional</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_B_FeatureRange__Q;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisionRates_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_rep_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_uses_B_FeatureRange__toDef;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_uses_F_FeatureRange__marginal;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gaussian></summary>
		public DistributionStructArray<Gaussian,double> Weights_uses_F_FeatureRange__marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public DistributionStructArray<Gaussian,double> Weights_uses_B_FeatureRange__toDef;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gaussian></summary>
		public DistributionStructArray<Gaussian,double> Weights_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public DistributionStructArray<Gaussian,double> Weights_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_rep_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_rep_B;
		/// <summary>Buffer for GammaRatioOp_Laplace.AAverageConditional</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_B_FeatureRange__Q;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_iterationsDone = 0;
					this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = false;
					this.Changed_FeatureCount_InstanceCount_iterationsDone = 0;
					this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_iterationsDone = 0;
					this.Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone = 0;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 0;
					this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised = false;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 0;
					this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised = false;
					this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = false;
					this.Changed_FeatureCount_iterationsDone = 0;
					this.Changed_FeatureCount_InstanceCount_iterationsDone = 0;
					this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_iterationsDone = 0;
					this.Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone = 0;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_iterationsDone = 0;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 0;
					this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_iterationsDone = 0;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 0;
					this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_iterationsDone = 0;
					this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised = false;
				this.Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone = 0;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 0;
				this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionStructArray<Gaussian,double> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_iterationsDone = 0;
				this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'WeightPrecisionRateConstraints'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRateConstraints
		{
			get {
				return this.weightPrecisionRateConstraints;
			}
			set {
				this.weightPrecisionRateConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_iterationsDone = 0;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 0;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 0;
				this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public bool[] Labels
		{
			get {
				return this.labels;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'Labels\'");
				}
				this.labels = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				return this.WeightPrecisionRateConstraints;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				this.WeightPrecisionRateConstraints = (DistributionStructArray<Gamma,double>)value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="WeightPrecisionRates")&&(query=="MarginalDividedByPrior")) {
				return this.WeightPrecisionRatesMarginalDividedByPrior();
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone) {
				this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised = false;
				this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
			}
			this.Changed_InstanceCount();
			this.Constant();
			this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3(initialise);
			this.Changed_FeatureCount();
			this.Changed_FeatureCount_InstanceCount();
			this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10(initialise);
			this.Changed_InstanceCount_FeatureCount_FeatureValues();
			this.Changed_FeatureCount_WeightPrecisionRateConstraints();
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues();
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2(initialise);
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11(initialise);
			this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8(initialise);
			this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12(initialise);
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_iterationsDone==1) {
				return ;
			}
			// Create array for replicates of 'FeatureScores_F'
			this.FeatureScores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			// Create array for replicates of 'Score_F'
			this.Score_F = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_F[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'NoisyScore_F'
			this.NoisyScore_F = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_F[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'NoisyScore_use_B'
			this.NoisyScore_use_B = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_use_B[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Score_B'
			this.Score_B = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_B[InstanceRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'FeatureScores_B'
			this.FeatureScores_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.Changed_InstanceCount_iterationsDone = 1;
			this.Changed_FeatureCount_InstanceCount_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			this.CommonWeightPrecision_F = Gamma.Uniform();
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.CommonWeightPrecision_F);
			this.Constant_iterationsDone = 1;
			this.Changed_FeatureCount_iterationsDone = 0;
			this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and FeatureCount and InstanceCount and FeatureValues and Labels and WeightPrecisionRateConstraints and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised)) {
				return ;
			}
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.CommonWeightPrecision_F);
			// Message to 'CommonWeightPrecision' from GammaFromShapeAndRate factor
			this.CommonWeightPrecision_F = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			// Message to 'CommonWeightPrecision_rep' from Replicate factor
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
			this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionRate3_isInitialised = true;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount</summary>
		private void Changed_FeatureCount()
		{
			if (this.Changed_FeatureCount_iterationsDone==1) {
				return ;
			}
			// Create array for 'Weights' Forwards messages.
			this.Weights_F = new DistributionStructArray<Gaussian,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_F[FeatureRange] = Gaussian.Uniform();
			}
			// Create array for 'SharedWeightPrecisionRates' Forwards messages.
			this.SharedWeightPrecisionRates_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_F[FeatureRange] = Gamma.Uniform();
			}
			// Create array for 'WeightPrecisions' Forwards messages.
			this.WeightPrecisions_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'WeightPrecisions' Backwards messages.
			this.WeightPrecisions_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_F[FeatureRange] = Gamma.Uniform();
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist = Gamma.Uniform();
				FeatureRange = this.featureCount-1;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this._hoist = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
				FeatureRange = this.featureCount-1;
			}
			// Create array for 'SharedWeightPrecisionRates_use' Backwards messages.
			this.SharedWeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'SharedWeightPrecisionRates_uses' Forwards messages.
			this.SharedWeightPrecisionRates_uses_F = new DistributionStructArray<Gamma,double>[this.featureCount];
			// Create array for 'SharedWeightPrecisionRates_uses' Backwards messages.
			this.SharedWeightPrecisionRates_uses_B = new DistributionStructArray<Gamma,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'SharedWeightPrecisionRates_uses' Forwards messages.
				this.SharedWeightPrecisionRates_uses_F[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				// Create array for 'SharedWeightPrecisionRates_uses' Backwards messages.
				this.SharedWeightPrecisionRates_uses_B[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][_ind] = Gamma.Uniform();
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][_ind] = Gamma.Uniform();
				}
			}
			// Create array for replicates of 'SharedWeightPrecisionRates_B_FeatureRange__Q'
			this.SharedWeightPrecisionRates_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'WeightPrecisionRates_uses' Backwards messages.
			this.WeightPrecisionRates_uses_B = new DistributionStructArray<Gamma,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'WeightPrecisionRates_uses' Backwards messages.
				this.WeightPrecisionRates_uses_B[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.WeightPrecisionRates_uses_B[FeatureRange][_ind] = Gamma.Uniform();
				}
			}
			// Create array for replicates of 'WeightPrecisionRates_rep_B'
			this.WeightPrecisionRates_rep_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			// Create array for 'WeightPrecisionRates_uses' Forwards messages.
			this.WeightPrecisionRates_uses_F = new DistributionStructArray<Gamma,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'WeightPrecisionRates_uses' Forwards messages.
				this.WeightPrecisionRates_uses_F[FeatureRange] = new DistributionStructArray<Gamma,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.WeightPrecisionRates_uses_F[FeatureRange][_ind] = Gamma.Uniform();
				}
			}
			// Create array for replicates of 'WeightPrecisionRates_rep_B_toDef'
			this.WeightPrecisionRates_rep_B_toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_rep' from Replicate factor
				this.WeightPrecisionRates_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.WeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			// Create array for replicates of 'WeightPrecisionRates_uses_B_FeatureRange__toDef'
			this.WeightPrecisionRates_uses_B_FeatureRange__toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			// Create array for replicates of 'WeightPrecisionRates_uses_F_FeatureRange__marginal'
			this.WeightPrecisionRates_uses_F_FeatureRange__marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_F_FeatureRange__marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			// Create array for 'Weights_uses' Backwards messages.
			this.Weights_uses_B = new DistributionStructArray<Gaussian,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'Weights_uses' Backwards messages.
				this.Weights_uses_B[FeatureRange] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'Weights_uses_F_FeatureRange__marginal'
			this.Weights_uses_F_FeatureRange__marginal = new DistributionStructArray<Gaussian,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'Weights_uses' from Replicate factor
				this.Weights_uses_F_FeatureRange__marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Weights_F[FeatureRange]);
			}
			// Create array for replicates of 'Weights_uses_B_FeatureRange__toDef'
			this.Weights_uses_B_FeatureRange__toDef = new DistributionStructArray<Gaussian,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'Weights_uses' from Replicate factor
				this.Weights_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Weights_F[FeatureRange]);
			}
			// Create array for 'Weights_uses' Forwards messages.
			this.Weights_uses_F = new DistributionStructArray<Gaussian,double>[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'Weights_uses' Forwards messages.
				this.Weights_uses_F[FeatureRange] = new DistributionStructArray<Gaussian,double>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					this.Weights_uses_F[FeatureRange][_ind] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Weights_rep_F_marginal'
			this.Weights_rep_F_marginal = new DistributionStructArray<Gaussian,double>(this.featureCount);
			// Create array for replicates of 'Weights_rep_B_toDef'
			this.Weights_rep_B_toDef = new DistributionStructArray<Gaussian,double>(this.featureCount);
			// Create array for replicates of 'Weights_rep_F'
			this.Weights_rep_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			// Create array for replicates of 'Weights_rep_B'
			this.Weights_rep_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			// Create array for replicates of 'WeightPrecisions_B_FeatureRange__Q'
			this.WeightPrecisions_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'CommonWeightPrecision_rep' Backwards messages.
			this.CommonWeightPrecision_rep_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			// Create array for 'CommonWeightPrecision_rep' Forwards messages.
			this.CommonWeightPrecision_rep_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.CommonWeightPrecision_rep_F[FeatureRange] = Gamma.Uniform();
			}
			// Create array for 'Weights_marginal' Forwards messages.
			this.Weights_marginal_F = new DistributionStructArray<Gaussian,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_marginal_F[FeatureRange] = Gaussian.Uniform();
			}
			this.Changed_FeatureCount_iterationsDone = 1;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_iterationsDone = 0;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_iterationsDone = 0;
			this.Changed_FeatureCount_InstanceCount_iterationsDone = 0;
			this.Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone = 0;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 0;
			this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_iterationsDone = 0;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and InstanceCount</summary>
		private void Changed_FeatureCount_InstanceCount()
		{
			if (this.Changed_FeatureCount_InstanceCount_iterationsDone==1) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'WeightPrecisionRates_rep' Backwards messages.
				this.WeightPrecisionRates_rep_B[FeatureRange] = new DistributionStructArray<Gamma,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange] = Gamma.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'Weights_rep' Forwards messages.
				this.Weights_rep_F[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_rep_F[FeatureRange][InstanceRange] = Gaussian.Uniform();
				}
				// Create array for 'FeatureScores' Forwards messages.
				this.FeatureScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.FeatureScores_F[InstanceRange][FeatureRange] = Gaussian.Uniform();
				}
				// Create array for 'FeatureScores' Backwards messages.
				this.FeatureScores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.FeatureScores_B[InstanceRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Create array for 'Weights_rep' Backwards messages.
				this.Weights_rep_B[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			}
			this.Changed_FeatureCount_InstanceCount_iterationsDone = 1;
			this.Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone = 0;
			this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and InstanceCount and must reset on changes to numberOfIterationsDecreased and FeatureValues and Labels and WeightPrecisionRateConstraints and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10(bool initialise)
		{
			if ((this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_rep_B[FeatureRange][InstanceRange] = Gaussian.Uniform();
				}
			}
			this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_iterationsDone = 1;
			this.Changed_FeatureCount_InstanceCount_Init_numberOfIterationsDecreased_FeatureValues_Labels_WeightPreci10_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and FeatureCount and FeatureValues</summary>
		private void Changed_InstanceCount_FeatureCount_FeatureValues()
		{
			if (this.Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone==1) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'WeightPrecisionRates_rep' from Gaussian factor
					this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange] = GaussianOpBase.PrecisionAverageConditional(this.featureValues[InstanceRange][FeatureRange], 0.0);
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_rep' from Replicate factor
				this.WeightPrecisionRates_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisionRates_rep_B[FeatureRange], this.WeightPrecisionRates_rep_B_toDef[FeatureRange]);
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_rep_B_toDef[FeatureRange]);
			}
			this.Changed_InstanceCount_FeatureCount_FeatureValues_iterationsDone = 1;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightPrecisionRateConstraints</summary>
		private void Changed_FeatureCount_WeightPrecisionRateConstraints()
		{
			if (this.Changed_FeatureCount_WeightPrecisionRateConstraints_iterationsDone==1) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Copy factor
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][0], this.weightPrecisionRateConstraints[FeatureRange]);
			}
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_iterationsDone = 1;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightPrecisionRateConstraints and InstanceCount and FeatureValues</summary>
		private void Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues()
		{
			if (this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone==1) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisionRates_uses' from Replicate factor
				this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange]);
				// Message to 'SharedWeightPrecisionRates_uses' from Copy factor
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_uses_B_FeatureRange__toDef[FeatureRange]);
			}
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_iterationsDone = 1;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginalDividedByPrior()
		{
			return this.WeightPrecisionRates_uses_B_FeatureRange__toDef;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and must reset on changes to numberOfIterationsDecreased and InstanceCount and FeatureValues and Labels and WeightPrecisionRateConstraints and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2(bool initialise)
		{
			if ((this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_B[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				for(int _ind = 0; _ind<2; _ind++) {
					this.Weights_uses_B[FeatureRange][_ind] = Gaussian.Uniform();
				}
				// Message to 'Weights_rep' from Replicate factor
				this.Weights_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Weights_uses_F[FeatureRange][1]);
				// Message to 'Weights_rep' from Replicate factor
				this.Weights_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Weights_uses_F[FeatureRange][1]);
				this.CommonWeightPrecision_rep_B[FeatureRange] = Gamma.Uniform();
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
				// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist);
				// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
				this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
			}
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_iterationsDone = 1;
			this.Changed_FeatureCount_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_Labels_WeightPreci2_isInitialised = true;
			this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_iterationsDone = 0;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 0;
			this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightPrecisionRateConstraints and InstanceCount and FeatureValues and must reset on changes to numberOfIterationsDecreased and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11(bool initialise)
		{
			if ((this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'SharedWeightPrecisionRates_uses' from Replicate factor
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				// Message to 'WeightPrecisions' from Ratio factor
				this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
			}
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_iterationsDone = 1;
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_Init_numberOfIterati11_isInitialised = true;
			this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightConstraints and must reset on changes to numberOfIterationsDecreased and InstanceCount and FeatureValues and Labels and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8(bool initialise)
		{
			if ((this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'Weights_uses' from Copy factor
				this.Weights_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[FeatureRange][0], this.weightConstraints[FeatureRange]);
				// Message to 'Weights_uses' from Replicate factor
				this.Weights_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_uses_B[FeatureRange], this.Weights_uses_B_FeatureRange__toDef[FeatureRange]);
			}
			this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_iterationsDone = 1;
			this.Changed_FeatureCount_WeightConstraints_Init_numberOfIterationsDecreased_InstanceCount_FeatureValues_8_isInitialised = true;
			this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 0;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightConstraints and WeightPrecisionRateConstraints and InstanceCount and FeatureValues and must reset on changes to numberOfIterationsDecreased and Labels</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12(bool initialise)
		{
			if ((this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone==1)&&((!initialise)||this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'WeightPrecisions' from Gaussian factor
				this.WeightPrecisions_B[FeatureRange] = GaussianOp.PrecisionAverageConditional(this.Weights_uses_B_FeatureRange__toDef[FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_F[FeatureRange]);
			}
			this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_iterationsDone = 1;
			this.Changed_FeatureCount_WeightConstraints_WeightPrecisionRateConstraints_InstanceCount_FeatureValues_In12_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and FeatureCount and InstanceCount and FeatureValues and Labels and WeightPrecisionRateConstraints and WeightConstraints</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone==numberOfIterations) {
				return ;
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
					this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist);
					// Message to 'SharedWeightPrecisionRates' from GammaFromShapeAndRate factor
					this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this._hoist, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
					// Message to 'SharedWeightPrecisionRates_uses' from Replicate factor
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'WeightPrecisions' from Ratio factor
					this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'Weights' from Gaussian factor
					this.Weights_F[FeatureRange] = GaussianOp.SampleAverageConditional(this.Weights_uses_B_FeatureRange__toDef[FeatureRange], 0.0, this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_B[FeatureRange]);
					// Message to 'Weights_uses' from Replicate factor
					this.Weights_uses_F_FeatureRange__marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_uses_B_FeatureRange__toDef[FeatureRange], this.Weights_F[FeatureRange], this.Weights_uses_F_FeatureRange__marginal[FeatureRange]);
					// Message to 'Weights_uses' from Replicate factor
					this.Weights_uses_F[FeatureRange][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_rep_B_toDef[FeatureRange], this.Weights_uses_F_FeatureRange__marginal[FeatureRange], 1, this.Weights_uses_F[FeatureRange][1]);
					// Message to 'Weights_rep' from Replicate factor
					this.Weights_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_rep_B_toDef[FeatureRange], this.Weights_uses_F[FeatureRange][1], this.Weights_rep_F_marginal[FeatureRange]);
				}
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						// Message to 'Weights_rep' from Replicate factor
						this.Weights_rep_F[FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_rep_B[FeatureRange][InstanceRange], this.Weights_rep_F_marginal[FeatureRange], InstanceRange, this.Weights_rep_F[FeatureRange][InstanceRange]);
						// Message to 'FeatureScores' from Product factor
						this.FeatureScores_F[InstanceRange][FeatureRange] = GaussianProductOp.ProductAverageConditional(this.featureValues[InstanceRange][FeatureRange], this.Weights_rep_F[FeatureRange][InstanceRange]);
					}
					// Message to 'Score' from Sum factor
					this.Score_F[InstanceRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange]);
					// Message to 'NoisyScore' from GaussianFromMeanAndVariance factor
					this.NoisyScore_F[InstanceRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Score_F[InstanceRange], 1.0);
					// Message to 'NoisyScore_use' from IsPositive factor
					this.NoisyScore_use_B[InstanceRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.labels[InstanceRange]), this.NoisyScore_F[InstanceRange]);
					// Message to 'Score' from GaussianFromMeanAndVariance factor
					this.Score_B[InstanceRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScore_use_B[InstanceRange], 1.0);
					// Message to 'FeatureScores' from Sum factor
					this.FeatureScores_B[InstanceRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Score_B[InstanceRange], this.Score_F[InstanceRange], this.FeatureScores_F[InstanceRange], this.FeatureScores_B[InstanceRange]);
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						// Message to 'Weights_rep' from Product factor
						this.Weights_rep_B[FeatureRange][InstanceRange] = GaussianProductOp.BAverageConditional(this.FeatureScores_B[InstanceRange][FeatureRange], this.featureValues[InstanceRange][FeatureRange]);
						this.Weights_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalIncrement<Gaussian>(this.Weights_rep_F_marginal[FeatureRange], this.Weights_rep_F[FeatureRange][InstanceRange], this.Weights_rep_B[FeatureRange][InstanceRange]);
					}
				}
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'Weights_rep' from Replicate factor
					this.Weights_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_rep_B[FeatureRange], this.Weights_rep_B_toDef[FeatureRange]);
					// Message to 'Weights_uses' from Replicate factor
					this.Weights_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[FeatureRange][1], this.Weights_rep_B_toDef[FeatureRange]);
					// Message to 'Weights_uses' from Replicate factor
					this.Weights_uses_B_FeatureRange__toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_uses_B[FeatureRange], this.Weights_uses_B_FeatureRange__toDef[FeatureRange]);
					// Message to 'WeightPrecisions' from Gaussian factor
					this.WeightPrecisions_B[FeatureRange] = GaussianOp.PrecisionAverageConditional(this.Weights_uses_B_FeatureRange__toDef[FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_F[FeatureRange]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.CommonWeightPrecision_rep_B[FeatureRange] = GammaRatioOp_Laplace.AAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
				}
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_rep_B_toDef);
				// Message to 'CommonWeightPrecision_rep' from Replicate factor
				this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					// Message to 'CommonWeightPrecision_rep' from Replicate factor
					this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
					// Message to 'CommonWeightPrecision_rep' from Ratio factor
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					// Message to 'SharedWeightPrecisionRates_uses' from Ratio factor
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = GammaRatioOp_Laplace.BAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
					// Message to 'SharedWeightPrecisionRates_use' from Replicate factor
					this.SharedWeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_use_B[FeatureRange]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				// Message to 'Weights_marginal' from Variable factor
				this.Weights_marginal_F[FeatureRange] = VariableOp.MarginalAverageConditional<Gaussian>(this.Weights_uses_B_FeatureRange__toDef[FeatureRange], this.Weights_F[FeatureRange], this.Weights_marginal_F[FeatureRange]);
			}
			this.Changed_numberOfIterationsDecreased_FeatureCount_InstanceCount_FeatureValues_Labels_WeightPrecisionR13_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginalDividedByPrior()
		{
			return this.Weights_uses_B_FeatureRange__toDef;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
